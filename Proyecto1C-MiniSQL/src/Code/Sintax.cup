package Code;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;

parser code
{:
    public String Er = "";
    private Symbol s;

    public Symbol getS(){
    	return this.s;
    }

    public final Class getSymbolContainer() {
        return sym.class;
    }

    public void syntax_error(Symbol s){
  	this.s=s; 
 	List<Integer> ids = expected_token_ids();
	LinkedList<String> idsNames = new LinkedList<String>();
	for (Integer esperado : ids){
            idsNames.add(symbl_name_from_id(esperado));
            idsNames.add(", ");
	}
       	Er = Er + ("Error de sintaxis en Token " + s.value + ", en columna " + (s.left+1) + ", en linea " + (s.right+1) + ", esperando tokens " + idsNames.toString() + "\n\n");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        List<Integer> ids = expected_token_ids();
	LinkedList<String> idsNames = new LinkedList<String>();
	for (Integer esperado : ids){
            idsNames.add(symbl_name_from_id(esperado));
            idsNames.add(", ");
	}
       	Er = Er + ("Error de sintaxis en Token " + s.value + ", en columna " + (s.left+1) + ", en linea " + (s.right+1) + ", esperando tokens " + idsNames.toString() + "\n\n");   
    }
    
    public String symbl_name_from_id(int id){
	Field[] fields = getSymbolContainer().getFields();
	for(Field f : fields){
            try {
		if (f.getInt(null)==id)
                    return f.getName();
            } catch (IllegalArgumentException e) {
                //e.printStackTrace();
            } catch (IllegalAccessException e) {
                //e.printStackTrace();
            }
	}
	return "invalid symbol id";
    }

    public List<Integer> expected_token_ids() {
        List<Integer> ret = new LinkedList<Integer>();
	int parse_state = ((Symbol)stack.peek()).parse_state ;
	short[] row = action_tab[parse_state];
	for (int i = 0; i<row.length; i+=2){
	    if (row[i]==-1) continue;
            if (!validate_expected_symbol(row[i])) continue;
            ret.add(new Integer(row[i]));
	}
	return ret;
    }
    
    private boolean validate_expected_symbol(int id){
	short lhs,rhs_size;
	int act;
	try {
            virtual_parse_stack vstack = new virtual_parse_stack(stack);
            /* parse until we fail or get past the lookahead input */
            for (;;){
                /* look up the action from the current state (on top of stack) */
		act = get_action(vstack.top(), id);

                /* if its an error, we fail */
		if (act == 0) return false;

                /* > 0 encodes a shift */
		if (act > 0){
                    /* push the new state on the stack */
                    vstack.push(act-1);
                    /* advance simulated input, if we run off the end, we are done */
                    if (!advance_lookahead()) return true;
		}
                    /* < 0 encodes a reduce */
		else{
                    /* if this is a reduce with the start production we are done */
                    if ((-act)-1 == start_production())  return true;

		    /* get the lhs Symbol and the rhs size */
                    lhs = production_tab[(-act)-1][0];
                    rhs_size = production_tab[(-act)-1][1];
                    /* pop handle off the stack */
                    for (int i = 0; i < rhs_size; i++) vstack.pop();
                    vstack.push(get_reduce(vstack.top(), lhs));
		}
            }
	} catch (Exception e) {
            e.printStackTrace();
	}
	return true;
    }

    protected static final int _error_sync_size(){
	return 1;
    }

    public String obtenerErrores(){
        return Er;
    }
:};

terminal ADD, EXTERNAL, PROCEDURE, ALL, OUT, READONLY, ENCRYPTION, RETURNS, 
SCHEMABINDING, CALLED, INLINE, CALLER, SELF, OWNER, RECOMPILE, MARK, FORWARDONLY, 
STATIC, KEYSET, DYNAMIC, FASTFORWARD, READ_ONLY, SCROLL_LOCKS, OPTIMISTIC, 
TYPE_WARNING, FETCH, PUBLIC, ALTER, FILE, RAISERROR, AND, FILLFACTOR, READ, ANY, FOR, 
READTEXT, TYPEWARNING, AS, FOREIGN, RECONFIGURE, ASC, FREETEXT, REFERENCES, AUTHORIZATION,
FREETEXTTABLE, REPLICATION, BACKUP, FROM, RESTORE, BEGIN, FULL, RESTRICT, BETWEEN,
FUNCTION, RETURN, BREAK, GOTO, REVERT, BROWSE, GRANT, REVOKE, BULK, GROUP, RIGHT,
BY, HAVING, ROLLBACK, CASCADE, HOLDLOCK, ROWCOUNT, CASE, IDENTITY, ROWGUIDCOL,
CHECK, IDENTITY_INSERT, RULE, CHECKPOINT, IDENTITYCOL, SAVE, CLOSE, IF, SCHEMA,
CLUSTERED, IN, SECURITYAUDIT, COALESCE, INDEX, SELECT, COLLATE, INNER, SEMANTICKEYPHRASETABLE,
COLUMN, INSERT, SEMANTICSIMILARITYDETAILSTABLE, COMMIT, INTERSECT, SEMANTICSIMILARITYTABLE,
COMPUTE, INTO, SESSION_USER, CONSTRAINT, IS, SET, CONTAINS, JOIN, SETUSER, CONTAINSTABLE, KEY,
SHUTDOWN, CONTINUE, KILL, SOME, CONVERT, LEFT, STATISTICS, CREATE, LIKE, SYSTEM_USER, CROSS, LINENO,
TABLE, CURRENT, LOAD, TABLESAMPLE, CURRENT_DATE, MERGE, TEXTSIZE, CURRENT_TIME, NATIONAL,
THEN, CURRENT_TIMESTAMP, NOCHECK, TO, CURRENT_USER, NONCLUSTERED, TOP, CURSOR, NOT, TRAN,
DATABASE, NULL, TRANSACTION, DBCC, NULLIF, TRIGGER, DEALLOCATE, OF, TRUNCATE, DECLARE, OFF,
TRY_CONVERT, DEFAULT, OFFSETS, TSEQUAL, DELETE, ON, UNION, DENY, OPEN, UNIQUE, DESC,
OPENDATASOURCE, UNPIVOT, DISK, OPENQUERY, UPDATE, DISTINCT, OPENROWSET, UPDATETEXT,
DISTRIBUTED, OPENXML, USE, DOUBLE, OPTION, USER, DROP, OR, VALUES, DUMP, ORDER, VARYING,
ELSE, OUTER, VIEW, END, OVER, WAITFOR, ERRLVL, PERCENT, WHEN, ESCAPE, PIVOT, WHERE, EXCEPT,
PLAN, WHILE, EXEC, PRECISION, WITH, EXECUTE, PRIMARY, WITHINGROUP, EXISTS, PRINT, WRITETEXT,
EXIT, PROC, INCLUDE, IMMEDIATE, GO, SUM, AVG, COUNT, MAX, MIN, KB, GB, TB, MB, BIGINT, INT,
SMALLINT, TINYINT, BIT, DECIMAL, MONEY, NUMERIC, SMALLMONEY, FLOAT, REAL, DATE, DATETIME,
DATETIME2, DATETIMEOFFSET, SMALLDATETIME, TIME, CHAR, TEXT, VARCHAR, NCHAR, NTEXT, NVARCHAR,
BINARY, IMAGE, VARBINARY, FILENAME, NAME, NAMES, SIZE, MAXSIZE, FILEGROWTH, UNLIMITED, OUTPUT, INPUT, 
LOCAL, GLOBAL, SCROLL, SCROLLLOCKS, Suma, Resta, Mul, Div, Porce, PuntoYComa, Coma, Punto, Acorchete,
Ccorchete, Aparentesis, Cparentesis, Allave, Cllave, Dcorchete, Dparentesis, Dllaves, Arroba,
Hashtag, Dhashtag, Menor, MenorIgual, Mayor, MayorIgual, Digual, Diferente, Dampersand, Dbarra,
Exclamacion, Igual, Varchar, VarcharError, ERROR, Float, Integer, Identificador, IdentificadorError, Bit;

non terminal Inicio1, Inicio2, SentenciasDML, SentenciasDDL, SentenciasTCL, SentenciasTSQL, 
Fin, ID, IDL1, IDL2, IDL3, IDL4, IDL5, IDL6, IFExists, Var, TipoDeDato, TipoDeDato1, TipoDeDato3, 
TipoDeDato2, TipoDeDato4, Drop, DropOptions, DropTable, DropTable1, DropView, DropView1, DropUser, 
DropDataBase, DropDataBase1, DropIndex, DropIndex1, DropIndex2, Truncate, AsElement, AsElement1, 
Operacion, Operacion2, Operacion1, Operacion4, Operacion3, Operacion5, Operacion6, Operaciones, 
Not, Top, Top1, Condicion, Condicion1, Condicion2, Condicion3, Condicion4, Condicion5, Where, Select, Select1, 
Having, OrderBy, OrderBy1, OrderBy2, OrderBy3, GroupBy, GroupBy1, SelectFrom, SelectFrom1, SelectFromJoin, 
JoinType, JoinOuter, SelectColumnas, SelectColumnas1, ListaColumnas, ListaColumnas1, ListaColumnas2, Insert, 
InsertInto, InsertListaColumna, InsertTipo, InsertTipo1, InsertTipo2, InsertValores, InsertValores1, 
Delete, DeleteFrom, Delete1, Delete2, Delete3, DeleteServer, Update, Update1, Update2, Update3, UpdateFrom, 
Create, Create1, CreateUser, CreateDataBase, CreateDataBase1, CreateDataBase2, CollateDataBase, Primary, 
Definitions, Definition, DefinitionName, FileName, DefinitionOptions, DefinitionOptions1, DefinitionOption, Size, Size1, Size2, 
MaxSize, MaxSize1, MaxSize2, FileGrowth, FileGrowth1, CreateView, CreateIndex, CreateIndex1, IndexColumna, 
IndexColumna1, IndexColumna2, IndexInclude, OnOption, CreateTable, TableOption, TableElement1, TableElement2, 
TableElement3, TableElement4, TableElement5, TableElement6, DefinicionColumna, DefinicionColumna1, DefinicionColumna2, DefinicionColumna3, DefinicionColumna4, 
DefinicionColumna5, DefinicionColumna6, DefinicionColumna7, DefinicionColumna8, DefinicionColumna9, DefinicionColumna10, DefinicionColumna11, DefinicionColumna12, ConstraintColumna, ConstraintColumna1, ConstraintColumna2, ConstraintColumna3, 
ConstraintColumna4, ConstraintColumna5, ConstraintColumna6, ConstraintColumna7, ConstraintColumna8, 
ConstraintColumna9, ConstraintColumna10, ConstraintTabla, ConstraintTabla1, ConstraintTabla2, ConstraintTabla3, ConstraintTabla4, 
ConstraintTabla5, IndexTabla, Alter, Alter1, AlterDataBase, AlterDataBase1, AlterDataBase2, AlterUser, 
AlterView, AlterView1, AlterTable, AlterTable1, AlterColumna, AlterColumna1, AlterColumna2, AlterColumna3, 
AlterColumna4, AlterTableDrop, AlterTableDrop1, AlterTableDrop2, AlterTableDrop3, AlterTableDrop4, Transact, 
Transact1, Transact2, Transact3, TransactName, Name, Name1, Rollback, Rollback1, Commit, Commit1, Save, OrAlter, 
Procedure, ProcedureName, ProcedureNum, ProcedureParam, ProcedureParam1, ProcedureParam2, ProcedureDataType, 
ProcedureDataType1, ProcedureDataType2, ProcedureDataType3, ProcedureOption, ProcedureOption1, ProcedureOption2, 
ProcedureOption3, Execute, ExecuteType, ProcedureReplication, BeginProcedure, ProcedureStatement, 
ProcedureStatement1, ProcedureStatement2, Function, FunctionParam, FunctionParam1, FunctionParam2, 
FunctionParam3, AsWord, ReadOnlyWord, ReturnType, ReturnTable, ReturnTable1, ReturnTable2, FunctionOption, 
SelectOption, ReturnData, ReturnData1, Cursor, Cursor1, Cursor2, Cursor3, Cursor4, Cursor5, Cursor6, Cursor7;

precedence left AND, OR, Aparentesis;

start with Inicio1;

Inicio1 ::= Inicio2 Fin Inicio1 |
            error Fin Inicio1 | ;
Inicio2 ::= SentenciasDML|
            SentenciasDDL|
            SentenciasTCL|
            SentenciasTSQL ;
SentenciasDML ::= Select|
                  Insert|
                  Delete|
                  Update ;
SentenciasDDL ::= Create|
                  Truncate|
                  Alter|
                  Drop ;
SentenciasTCL ::= Transact|
                  Rollback|
                  Commit|
                  Save ;
SentenciasTSQL ::= Cursor ; 
Fin ::= PuntoYComa|
        GO ;
ID ::= Identificador|
       Acorchete Identificador Ccorchete ;
IDL1 ::= ID IDL2 ;
IDL2 ::= Punto ID| ;
IDL3 ::= ID IDL4 ;
IDL4 ::= Punto IDL1| ;
IDL5 ::= ID IDL6 ;
IDL6 ::= Punto IDL3| ;
IFExists ::= IF EXISTS ;
Var ::= Arroba Identificador ;
TipoDeDato ::= TipoDeDato1 TipoDeDato2 ;
TipoDeDato1 ::= TipoDeDato3|
                Acorchete TipoDeDato3 Ccorchete ;
TipoDeDato3 ::= BIGINT|
                INT|
                SMALLINT|
                TINYINT|
                BIT|
                DECIMAL|
                MONEY|
                NUMERIC|
                SMALLMONEY|
                FLOAT|
                REAL|
                DATE|
                DATETIME|
                DATETIME2|
                DATETIMEOFFSET|
                SMALLDATETIME|
                TIME|
                CHAR|
                TEXT|
                VARCHAR|
                NCHAR|
                NTEXT|
                NVARCHAR|
                BINARY|
                IMAGE|
                VARBINARY ;
TipoDeDato2 ::= Aparentesis Integer TipoDeDato4 Cparentesis| ;
TipoDeDato4 ::= Coma Integer | ;
Drop ::= DROP DropOptions ;
DropOptions ::= DropTable|
                DropUser|
                DropView|
                DropDataBase|
                DropIndex ;
DropTable ::= TABLE IFExists IDL3 DropTable1 ;
DropTable1 ::= Coma IDL3 DropTable1 | ;
DropView ::= VIEW IFExists IDL1 DropView1 ;
DropView1 ::= Coma IDL1 DropView1 | ;
DropUser ::= USER IFExists ID ;
DropDataBase ::= DATABASE IFExists ID DropDataBase1 ;
DropDataBase1 ::= Coma ID DropDataBase1 | ;
DropIndex ::= INDEX IFExists DropIndex1 DropIndex2 ;
DropIndex1 ::= ID ON IDL3 ;
DropIndex2 ::= Coma DropIndex1 DropIndex2 | ;
Truncate ::= TRUNCATE TABLE IDL3 ;
AsElement ::= AS AsElement1 |
              AsElement1 | ;
AsElement1 ::= ID |
               Varchar ;
Operacion ::= Operacion1 Operacion2 ;
Operacion2 ::= Suma Operacion1 Operacion2 |
               Resta Operacion1 Operacion2 | ;
Operacion1 ::= Operacion3 Operacion4 ;
Operacion4 ::= Mul Operacion3 Operacion4 |
               Div Operacion3 Operacion4 | ;
Operacion3 ::= Aparentesis Operacion Cparentesis |
               Operacion5 ;
Operacion5 ::= IDL5 |
               Integer |
               Float |
               Varchar |
               Bit |
               NULL |
               SUM Aparentesis Operacion6 |
               AVG Aparentesis Operacion6 |
               MIN Aparentesis Operacion6 |
               MAX Aparentesis Operacion6 |
               COUNT Aparentesis Operacion6 ;
Operacion6 ::= IDL5 Cparentesis |
               Integer Cparentesis |
               Bit Cparentesis |
               Mul Cparentesis ;
Operaciones ::= Coma Operacion Operaciones | ;
Not ::= NOT | ;
Top ::= TOP Aparentesis Integer Cparentesis Top1 | ;
Top1 ::= PERCENT | ;
//Condicion5 ::= Not Condicion2 Condicion1 ;
Condicion ::= Not Condicion2 Condicion1 |
              Aparentesis Condicion Cparentesis Condicion1 ;
//Condicion5 ::= Condicion1 ;
Condicion1 ::= Condicion5 Condicion | ;
Condicion2 ::= Operacion Condicion3 ;
Condicion3 ::= Menor Operacion |
               MenorIgual Operacion |
               Mayor Operacion |
               MayorIgual Operacion |
               Digual Operacion |
               Diferente Operacion |
               Dampersand Operacion |
               Dbarra Operacion |
               Exclamacion Operacion |
               Igual Operacion |
               IS Not NULL |
               Not Condicion4 ;
Condicion4 ::= IN Aparentesis Operacion Operaciones Cparentesis |
               BETWEEN Condicion AND Condicion |
               LIKE Condicion ;
Condicion5 ::= AND | OR ;
Where ::= WHERE Condicion | ;
Select ::= SELECT Select1 Top SelectColumnas SelectFrom Where GroupBy Having OrderBy ;
Select1 ::= ALL |
            DISTINCT | ;
Having ::= HAVING Condicion | ;
OrderBy ::= ORDER BY Operacion OrderBy1 OrderBy2 OrderBy3 | ;
OrderBy1 ::= COLLATE ID | ;
OrderBy2 ::= ASC |
             DESC | ; 
OrderBy3 ::= Operacion OrderBy1 OrderBy2 | ;
GroupBy ::= GROUP BY Operacion GroupBy1 | ;
GroupBy1 ::= Coma Operacion GroupBy1 | ;
SelectFrom ::= FROM IDL3 AsElement SelectFromJoin SelectFrom1 | ;
SelectFrom1 ::= Coma IDL3 AsElement SelectFromJoin | ;
SelectFromJoin ::= JoinType JOIN IDL3 AsElement ON Condicion SelectFromJoin | ;
JoinType ::= INNER |
              RIGHT JoinOuter |
              LEFT JoinOuter |
              FULL JoinOuter | ;
JoinOuter ::= OUTER | ;
SelectColumnas ::= Operacion AsElement SelectColumnas1 |
                   Mul SelectColumnas1 ;
SelectColumnas1 ::= Coma Operacion AsElement SelectColumnas1 | ;
ListaColumnas ::= Aparentesis ListaColumnas1 Cparentesis ;
ListaColumnas1 ::= ID ListaColumnas2 ;
ListaColumnas2 ::= Coma ID ListaColumnas2 | ;
Insert ::= INSERT Top InsertInto IDL3 InsertListaColumna InsertValores ;
InsertInto ::= INTO | ;
InsertListaColumna ::= ListaColumnas | ;
InsertTipo ::= InsertTipo1 InsertTipo2 ;
InsertTipo1 ::= DEFAULT |
                Integer |
                Float |
                Varchar |
                Bit ;
InsertTipo2 ::= Coma InsertTipo1 InsertTipo2 | ;
InsertValores ::= VALUES Aparentesis InsertTipo Cparentesis InsertValores1 |
                  DEFAULT VALUES ;
InsertValores1 ::= Coma Aparentesis InsertTipo Cparentesis InsertValores1 | ;
Delete ::= DELETE Top DeleteFrom Delete1 ;
DeleteFrom ::= FROM | ;
Delete1 ::= OPENQUERY DeleteServer |
            IDL3 Delete2 Where ;
Delete2 ::= FROM IDL3 Delete3 ;
Delete3 ::= Coma IDL3 Delete3 | ;
DeleteServer ::= Aparentesis ID Coma Varchar Cparentesis ;
Update ::= UPDATE Top IDL3 SET Update1 UpdateFrom Where ;
Update1 ::= ID Igual Update2 Update3 ;
Update2 ::= DEFAULT |
            Operacion ;
Update3 ::= Coma Update1 | ;
UpdateFrom ::= FROM IDL3 Delete3 | ;
Create ::= CREATE Create1 ;
Create1 ::= Procedure |
            Function |
            CreateTable |
            CreateDataBase |
            CreateUser |
            CreateView |
            CreateIndex ;
CreateUser ::= USER ID ;
CreateDataBase ::= DATABASE ID CreateDataBase1 ;
CreateDataBase1 ::= CreateDataBase2 CollateDataBase ;
CreateDataBase2 ::= ON Primary Definitions | ;
CollateDataBase ::= COLLATE ID | ;
Primary ::= PRIMARY | ;
Definitions ::= Definition Coma Definitions |
                Definition ;
Definition ::= Aparentesis DefinitionName Igual Varchar Coma FileName Igual Varchar DefinitionOptions Cparentesis ;
DefinitionName ::= NAME | NAMES ;
FileName ::= FILENAME |
             FILE ;
DefinitionOptions ::= Coma DefinitionOption DefinitionOptions | ;
//DefinitionOptions1 ::= DefinitionOptions | ;
DefinitionOption ::= Size |
                     MaxSize |
                     FileGrowth ;
Size ::= SIZE Igual Integer Size1 ;
Size1 ::= Size2 | ;
Size2 ::= KB |
          MB |
          GB |
          TB ;
MaxSize ::= MAXSIZE Igual MaxSize1 ;
MaxSize1 ::= Integer MaxSize2 ;
MaxSize2 ::= Size2 |
             UNLIMITED | ;
FileGrowth ::= FILEGROWTH Igual Integer FileGrowth1 ;
FileGrowth1 ::= Size2 |
                Porce | ;
CreateView ::= VIEW IDL1 AS Select ;
CreateIndex ::= CreateIndex1 ConstraintColumna3 INDEX ID ON IDL3 IndexColumna IndexInclude Where OnOption ;
CreateIndex1 ::= UNIQUE | ;
IndexColumna ::= Aparentesis IndexColumna1 Cparentesis ;
IndexColumna1 ::= ID OrderBy2 IndexColumna2 ;
IndexColumna2 ::= Coma ID OrderBy2 IndexColumna2 | ;
IndexInclude ::= INCLUDE ListaColumnas | ;
OnOption ::= ON ID Aparentesis ID Cparentesis | ;
CreateTable ::= TABLE IDL3 Aparentesis TableElement2 TableElement3 Cparentesis TableOption ;
TableOption ::= ON PRIMARY | ;
TableElement1 ::= NOT TableElement4 | NULL ;
TableElement4 ::= FOR REPLICATION TableElement5 | NULL ;
TableElement5 ::= NOT TableElement6 | NULL ;
TableElement6 ::= NULL ;
TableElement2 ::= DefinicionColumna |
                  ConstraintTabla |
                  IndexTabla ;
TableElement3 ::= Coma TableElement2 TableElement3 | ;
//DefinicionColumna ::= ID TipoDeDato DefinicionColumna1 DefinicionColumna2 TableElement1 DefinicionColumna3 DefinicionColumna4 ConstraintColumna ; 
DefinicionColumna ::= ID TipoDeDato DefinicionColumna1 DefinicionColumna6 ;
DefinicionColumna1 ::= COLLATE ID | ;
DefinicionColumna2 ::= IDENTITY DefinicionColumna5 | ;
DefinicionColumna3 ::= NULL |
                       NOT NULL | ;
DefinicionColumna4 ::= ROWGUIDCOL | ;
DefinicionColumna5 ::= Aparentesis Bit Coma Bit Cparentesis | ;
DefinicionColumna6 ::= CONSTRAINT ID DefinicionColumna12 | DefinicionColumna7 | ;
DefinicionColumna7 ::= IDENTITY DefinicionColumna5 TableElement1 DefinicionColumna4 ConstraintColumna |
                       DefinicionColumna9 DefinicionColumna10 DefinicionColumna4 ConstraintColumna |
                       ROWGUIDCOL ConstraintColumna |
                       ConstraintColumna1 ConstraintColumna2 ConstraintColumna ;
DefinicionColumna8 ::= Integer |
                       Float |
                       Varchar |
                       Bit |
                       NULL ;
DefinicionColumna9 ::= NOT | ;
DefinicionColumna10 ::= NULL | 
                        FOR REPLICATION DefinicionColumna11 ;
DefinicionColumna11 ::= NOT NULL | 
                        NULL | ;
DefinicionColumna12 ::= DEFAULT DefinicionColumna8 DefinicionColumna2 TableElement1 DefinicionColumna4 ConstraintColumna ;
ConstraintColumna ::= ConstraintColumna1 ConstraintColumna2 ConstraintColumna | ;
ConstraintColumna1 ::= CONSTRAINT ID | ;
ConstraintColumna2 ::= ConstraintColumna10 ConstraintColumna3 |
                       ConstraintColumna4 REFERENCES IDL1 ConstraintColumna5 ConstraintColumna6 TableElement1 |
                       CHECK TableElement1 Aparentesis Condicion Cparentesis ;
ConstraintColumna3 ::= CLUSTERED |
                       NONCLUSTERED | ;
ConstraintColumna4 ::= FOREIGN KEY | ;
ConstraintColumna5 ::= Aparentesis ID Cparentesis | ;
ConstraintColumna6 ::= ON ConstraintColumna7 ConstraintColumna6 | ;
ConstraintColumna7 ::= DELETE ConstraintColumna8 | UPDATE ConstraintColumna8 ;
ConstraintColumna8 ::= CASCADE |
                       SET ConstraintColumna9 ;
ConstraintColumna9 ::= NULL |
                       DEFAULT ;
ConstraintColumna10 ::= PRIMARY KEY | UNIQUE ;
ConstraintTabla ::= ConstraintColumna1 ConstraintTabla1 ;
ConstraintTabla1 ::= PRIMARY KEY ConstraintColumna3 ConstraintTabla2 |
                     UNIQUE ConstraintColumna3 ConstraintTabla2 |
                     FOREIGN KEY ConstraintTabla3 REFERENCES IDL1 ConstraintColumna5 ConstraintColumna6 ConstraintColumna7 TableElement1 |
                     CHECK TableElement1 Aparentesis Condicion Cparentesis ;
ConstraintTabla2 ::= Aparentesis ID OrderBy2 ConstraintTabla5 Cparentesis ;
ConstraintTabla3 ::= Aparentesis ID ConstraintTabla4 Cparentesis ;
ConstraintTabla4 ::= Coma ID ConstraintTabla4 | ;
ConstraintTabla5 ::= Coma ID OrderBy2 ConstraintTabla5 | ;
IndexTabla ::= INDEX ID ConstraintColumna3 ConstraintTabla2 ;
Alter ::= ALTER Alter1 ;
Alter1 ::= AlterUser |
           AlterDataBase |
           AlterView |
           AlterTable |
           Procedure |
           Function ;
AlterDataBase ::= DATABASE AlterDataBase1 AlterDataBase2 ;
AlterDataBase1 ::= ID |
                   CURRENT ;
AlterDataBase2 ::= COLLATE ID |
                   SET ROLLBACK IMMEDIATE ;
AlterUser ::= USER ID ;
AlterView ::= VIEW IDL1 AlterView1 AS Select ;
AlterView1 ::=  ListaColumnas | ;
AlterTable ::= TABLE IDL3 AlterTable1 ;
AlterTable1 ::= AlterColumna |
                ADD TableElement2 TableElement3 |
                AlterTableDrop ;
AlterColumna ::= ALTER COLUMN ID AlterColumna1 ;
AlterColumna1 ::= AlterColumna2 |
                  AlterColumna3 AlterColumna4 ;
AlterColumna2 ::= TipoDeDato DefinicionColumna1 DefinicionColumna3 ;
AlterColumna3 ::= ADD |
                  DROP ;
AlterColumna4 ::= ROWGUIDCOL |
                  NOT FOR REPLICATION ;
AlterTableDrop ::= DROP AlterTableDrop1 AlterTableDrop2 ;
AlterTableDrop1 ::= AlterTableDrop3 IFExists ID |
                    COLUMN IFExists ID ;
AlterTableDrop2 ::= Coma AlterTableDrop4 AlterTableDrop2 | ; 
AlterTableDrop3 ::= CONSTRAINT | ;
AlterTableDrop4 ::= ID |
                    AlterTableDrop1 ;
Transact ::= BEGIN TransactName Transact1 ;
Transact1 ::= NAME Transact2 | ;
Transact2 ::= WITH MARK Transact3 | ;
Transact3 ::= Varchar | ;
TransactName ::= TRAN | 
                 TRANSACTION ;
Name ::= ID | 
         Var ;
Name1 ::= ID | 
          Var | ;
Rollback ::= ROLLBACK Rollback1 ;
Rollback1 ::= TransactName Name1 | ;
Commit ::= COMMIT Commit1 ;
Commit1 ::= TransactName Name1 | ;
Save ::= SAVE TransactName Name ;
OrAlter ::= OR ALTER | ;
Procedure ::= OrAlter ProcedureName IDL1 ProcedureNum ProcedureParam ProcedureOption ProcedureReplication AS BeginProcedure ;
ProcedureName ::= PROC |
                  PROCEDURE ;
ProcedureNum ::= PuntoYComa Integer | ;
ProcedureParam ::= ProcedureParam1 | ;
ProcedureParam1 ::= Var ProcedureDataType ProcedureParam2 ;
ProcedureParam2 ::= Coma ProcedureParam1 | ;
ProcedureDataType ::= TipoDeDato3 ProcedureDataType1 ProcedureDataType2 |
                      CURSOR VARYING ProcedureDataType3 |
                      ID READONLY ;
ProcedureDataType1 ::= Igual DEFAULT | ;
ProcedureDataType2 ::= ProcedureDataType3 | ;
ProcedureDataType3 ::= OUT | OUTPUT ;
ProcedureOption ::= WITH ProcedureOption1 | ;
ProcedureOption1 ::= ProcedureOption2 ProcedureOption3 ;
ProcedureOption2 ::= ENCRYPTION |
                     RECOMPILE |
                     Execute AS ExecuteType ;
ProcedureOption3 ::= Coma ProcedureOption1 | ;
Execute ::= EXEC |
            EXECUTE ;
ExecuteType ::= CALLER |
                SELF |
                OWNER |
                ID ;
ProcedureReplication ::= FOR REPLICATION | ;
BeginProcedure ::= BEGIN ProcedureStatement END |
                   ProcedureStatement ;
ProcedureStatement ::= SentenciasDML Fin ProcedureStatement1 ;
ProcedureStatement1 ::= SentenciasDML Fin ProcedureStatement2 | ;
ProcedureStatement2 ::= SentenciasDML Fin | ;
Function ::= OrAlter FUNCTION IDL1 Aparentesis FunctionParam Cparentesis RETURNS ReturnType ;
FunctionParam ::= FunctionParam1 | ;
FunctionParam1 ::= FunctionParam2 FunctionParam3 ;
FunctionParam2 ::= Var AsWord TipoDeDato3 ProcedureDataType1 ReadOnlyWord ;
FunctionParam3 ::= Coma FunctionParam1 | ;
AsWord ::= AS | ;
ReadOnlyWord ::= READONLY | ;
ReturnType ::= ReturnTable |
               ReturnData ;
ReturnTable ::= TABLE ReturnTable1 AsWord RETURN SelectOption ;
ReturnTable1 ::= WITH FunctionOption ReturnTable2 | ;
ReturnTable2 ::= Coma ReturnTable1 | ;
FunctionOption ::= ENCRYPTION |
                   SCHEMABINDING |
                   RETURNS NULL ON NULL INPUT |
                   CALLED ON NULL INPUT |
                   EXECUTE AS ExecuteType ;
SelectOption ::= Aparentesis Select Cparentesis |
                 Select ;
ReturnData ::= TipoDeDato3 ReturnTable1 AsWord BEGIN SentenciasDML Fin RETURN ReturnData1 END ;
ReturnData1 ::= Var | 
                Integer ;
Cursor ::= DECLARE ID CURSOR Cursor1 Cursor2 Cursor3 Cursor4 Cursor5 FOR Select Cursor6 ;
Cursor1 ::= LOCAL |
            GLOBAL | ;
Cursor2 ::= FORWARDONLY | 
            SCROLL | ;
Cursor3 ::= STATIC |
            KEYSET |
            DYNAMIC |
            FASTFORWARD | ;
Cursor4 ::= READ_ONLY |
            SCROLL_LOCKS |
            OPTIMISTIC | ;
Cursor5 ::= TYPE_WARNING | ;
Cursor6 ::= FOR UPDATE Cursor7 | ;
Cursor7 ::= OF ListaColumnas1 | ;