/* The following code was generated by JFlex 1.7.0 */

package Code;
import static Code.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/Sthephan/Documents/GitHub/Proyect1Compi/Proyecto1C-MiniSQL/src/Code/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\75\1\3\1\1\16\10\4\0\1\52\1\72"+
    "\1\0\1\66\1\7\1\54\1\73\1\22\1\61\1\62\1\5\1\21"+
    "\1\56\1\6\1\17\1\4\1\12\1\12\1\53\7\16\1\0\1\55"+
    "\1\67\1\70\1\71\1\0\1\65\1\23\1\41\1\33\1\24\1\25"+
    "\1\43\1\42\1\37\1\35\1\50\1\45\1\15\1\40\1\13\1\32"+
    "\1\31\1\51\1\30\1\36\1\27\1\14\1\47\1\44\1\26\1\34"+
    "\1\46\1\57\1\0\1\60\1\0\1\11\1\0\4\7\1\20\25\7"+
    "\1\63\1\74\1\64\1\0\6\10\1\10\32\10\2\0\4\7\4\0"+
    "\1\7\2\0\1\10\7\0\1\7\4\0\1\7\5\0\27\7\1\0"+
    "\37\7\1\0\u01ca\7\4\0\14\7\16\0\5\7\7\0\1\7\1\0"+
    "\1\7\21\0\160\10\5\7\1\0\2\7\2\0\4\7\10\0\1\7"+
    "\1\0\3\7\1\0\1\7\1\0\24\7\1\0\123\7\1\0\213\7"+
    "\1\0\5\10\2\0\236\7\11\0\46\7\2\0\1\7\7\0\47\7"+
    "\7\0\1\7\1\0\55\10\1\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\1\10\10\0\33\7\5\0\3\7\15\0\5\10\6\0\1\7"+
    "\4\0\13\10\5\0\53\7\37\10\4\0\2\7\1\10\143\7\1\0"+
    "\1\7\10\10\1\0\6\10\2\7\2\10\1\0\4\10\2\7\12\10"+
    "\3\7\2\0\1\7\17\0\1\10\1\7\1\10\36\7\33\10\2\0"+
    "\131\7\13\10\1\7\16\0\12\10\41\7\11\10\2\7\4\0\1\7"+
    "\5\0\26\7\4\10\1\7\11\10\1\7\3\10\1\7\5\10\22\0"+
    "\31\7\3\10\104\0\1\7\1\0\13\7\67\0\33\10\1\0\4\10"+
    "\66\7\3\10\1\7\22\10\1\7\7\10\12\7\2\10\2\0\12\10"+
    "\1\0\7\7\1\0\7\7\1\0\3\10\1\0\10\7\2\0\2\7"+
    "\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7\2\0\1\10"+
    "\1\7\7\10\2\0\2\10\2\0\3\10\1\7\10\0\1\10\4\0"+
    "\2\7\1\0\3\7\2\10\2\0\12\10\4\7\7\0\1\7\5\0"+
    "\3\10\1\0\6\7\4\0\2\7\2\0\26\7\1\0\7\7\1\0"+
    "\2\7\1\0\2\7\1\0\2\7\2\0\1\10\1\0\5\10\4\0"+
    "\2\10\2\0\3\10\3\0\1\10\7\0\4\7\1\0\1\7\7\0"+
    "\14\10\3\7\1\10\13\0\3\10\1\0\11\7\1\0\3\7\1\0"+
    "\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\10\1\7"+
    "\10\10\1\0\3\10\1\0\3\10\2\0\1\7\17\0\2\7\2\10"+
    "\2\0\12\10\1\0\1\7\17\0\3\10\1\0\10\7\2\0\2\7"+
    "\2\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\10"+
    "\1\7\7\10\2\0\2\10\2\0\3\10\10\0\2\10\4\0\2\7"+
    "\1\0\3\7\2\10\2\0\12\10\1\0\1\7\20\0\1\10\1\7"+
    "\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7\4\0\5\10"+
    "\3\0\3\10\1\0\4\10\2\0\1\7\6\0\1\10\16\0\12\10"+
    "\11\0\1\7\7\0\3\10\1\0\10\7\1\0\3\7\1\0\27\7"+
    "\1\0\12\7\1\0\5\7\3\0\1\7\7\10\1\0\3\10\1\0"+
    "\4\10\7\0\2\10\1\0\2\7\6\0\2\7\2\10\2\0\12\10"+
    "\22\0\2\10\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7"+
    "\1\0\5\7\2\0\1\10\1\7\7\10\1\0\3\10\1\0\4\10"+
    "\7\0\2\10\7\0\1\7\1\0\2\7\2\10\2\0\12\10\1\0"+
    "\2\7\17\0\2\10\1\0\10\7\1\0\3\7\1\0\51\7\2\0"+
    "\1\7\7\10\1\0\3\10\1\0\4\10\1\7\10\0\1\10\10\0"+
    "\2\7\2\10\2\0\12\10\12\0\6\7\2\0\2\10\1\0\22\7"+
    "\3\0\30\7\1\0\11\7\1\0\1\7\2\0\7\7\3\0\1\10"+
    "\4\0\6\10\1\0\1\10\1\0\10\10\22\0\2\10\15\0\60\7"+
    "\1\10\2\7\7\10\4\0\10\7\10\10\1\0\12\10\47\0\2\7"+
    "\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7"+
    "\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7"+
    "\1\0\4\7\1\10\2\7\6\10\1\0\2\10\1\7\2\0\5\7"+
    "\1\0\1\7\1\0\6\10\2\0\12\10\2\0\4\7\40\0\1\7"+
    "\27\0\2\10\6\0\12\10\13\0\1\10\1\0\1\10\1\0\1\10"+
    "\4\0\2\10\10\7\1\0\44\7\4\0\24\10\1\0\2\10\5\7"+
    "\13\10\1\0\44\10\11\0\1\10\71\0\53\7\24\10\1\7\12\10"+
    "\6\0\6\7\4\10\4\7\3\10\1\7\3\10\2\7\7\10\3\7"+
    "\4\10\15\7\14\10\1\7\17\10\2\0\46\7\1\0\1\7\5\0"+
    "\1\7\2\0\53\7\1\0\u014d\7\1\0\4\7\2\0\7\7\1\0"+
    "\1\7\1\0\4\7\2\0\51\7\1\0\4\7\2\0\41\7\1\0"+
    "\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\17\7\1\0"+
    "\71\7\1\0\4\7\2\0\103\7\2\0\3\10\40\0\20\7\20\0"+
    "\125\7\14\0\u026c\7\2\0\21\7\1\0\32\7\5\0\113\7\3\0"+
    "\3\7\17\0\15\7\1\0\4\7\3\10\13\0\22\7\3\10\13\0"+
    "\22\7\2\10\14\0\15\7\1\0\3\7\1\0\2\10\14\0\64\7"+
    "\40\10\3\0\1\7\3\0\2\7\1\10\2\0\12\10\41\0\3\10"+
    "\2\0\12\10\6\0\130\7\10\0\51\7\1\10\1\7\5\0\106\7"+
    "\12\0\35\7\3\0\14\10\4\0\14\10\12\0\12\10\36\7\2\0"+
    "\5\7\13\0\54\7\4\0\21\10\7\7\2\10\6\0\12\10\46\0"+
    "\27\7\5\10\4\0\65\7\12\10\1\0\35\10\2\0\13\10\6\0"+
    "\12\10\15\0\1\7\130\0\5\10\57\7\21\10\7\7\4\0\12\10"+
    "\21\0\11\10\14\0\3\10\36\7\15\10\2\7\12\10\54\7\16\10"+
    "\14\0\44\7\24\10\10\0\12\10\3\0\3\7\12\10\44\7\122\0"+
    "\3\10\1\0\25\10\4\7\1\10\4\7\3\10\2\7\11\0\300\7"+
    "\47\10\25\0\4\10\u0116\7\2\0\6\7\2\0\46\7\2\0\6\7"+
    "\2\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\37\7"+
    "\2\0\65\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7"+
    "\3\0\4\7\2\0\6\7\4\0\15\7\5\0\3\7\1\0\7\7"+
    "\16\0\5\10\30\0\1\75\1\75\5\10\20\0\2\7\23\0\1\7"+
    "\13\0\5\10\5\0\6\10\1\0\1\7\15\0\1\7\20\0\15\7"+
    "\3\0\33\7\25\0\15\10\4\0\1\10\3\0\14\10\21\0\1\7"+
    "\4\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0\4\7"+
    "\5\0\5\7\4\0\1\7\21\0\51\7\u0a77\0\57\7\1\0\57\7"+
    "\1\0\205\7\6\0\4\7\3\10\2\7\14\0\46\7\1\0\1\7"+
    "\5\0\1\7\2\0\70\7\7\0\1\7\17\0\1\10\27\7\11\0"+
    "\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0"+
    "\7\7\1\0\7\7\1\0\7\7\1\0\40\10\57\0\1\7\u01d5\0"+
    "\3\7\31\0\11\7\6\10\1\0\5\7\2\0\5\7\4\0\126\7"+
    "\2\0\2\10\2\0\3\7\1\0\132\7\1\0\4\7\5\0\51\7"+
    "\3\0\136\7\21\0\33\7\65\0\20\7\u0200\0\u19b6\7\112\0\u51cd\7"+
    "\63\0\u048d\7\103\0\56\7\2\0\u010d\7\3\0\20\7\12\10\2\7"+
    "\24\0\57\7\1\10\4\0\12\10\1\0\31\7\7\0\1\10\120\7"+
    "\2\10\45\0\11\7\2\0\147\7\2\0\4\7\1\0\4\7\14\0"+
    "\13\7\115\0\12\7\1\10\3\7\1\10\4\7\1\10\27\7\5\10"+
    "\20\0\1\7\7\0\64\7\14\0\2\10\62\7\21\10\13\0\12\10"+
    "\6\0\22\10\6\7\3\0\1\7\4\0\12\10\34\7\10\10\2\0"+
    "\27\7\15\10\14\0\35\7\3\0\4\10\57\7\16\10\16\0\1\7"+
    "\12\10\46\0\51\7\16\10\11\0\3\7\1\10\10\7\2\10\2\0"+
    "\12\10\6\0\27\7\3\0\1\7\1\10\4\0\60\7\1\10\1\7"+
    "\3\10\2\7\2\10\5\7\2\10\1\7\1\10\1\7\30\0\3\7"+
    "\2\0\13\7\5\10\2\0\3\7\2\10\12\0\6\7\2\0\6\7"+
    "\2\0\6\7\11\0\7\7\1\0\7\7\221\0\43\7\10\10\1\0"+
    "\2\10\2\0\12\10\6\0\u2ba4\7\14\0\27\7\4\0\61\7\u2104\0"+
    "\u016e\7\2\0\152\7\46\0\7\7\14\0\5\7\5\0\1\7\1\10"+
    "\12\7\1\0\15\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0"+
    "\2\7\1\0\154\7\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0"+
    "\15\7\3\0\20\10\20\0\7\10\14\0\2\7\30\0\3\7\31\0"+
    "\1\7\6\0\5\7\1\0\207\7\2\0\1\10\4\0\1\7\13\0"+
    "\12\10\7\0\32\7\4\0\1\7\1\0\32\7\13\0\131\7\3\0"+
    "\6\7\2\0\6\7\2\0\6\7\2\0\3\7\3\0\2\7\3\0"+
    "\2\7\22\0\3\10\4\0\14\7\1\0\32\7\1\0\23\7\1\0"+
    "\2\7\1\0\17\7\2\0\16\7\42\0\173\7\105\0\65\7\210\0"+
    "\1\10\202\0\35\7\3\0\61\7\57\0\37\7\21\0\33\7\65\0"+
    "\36\7\2\0\44\7\4\0\10\7\1\0\5\7\52\0\236\7\2\0"+
    "\12\10\u0356\0\6\7\2\0\1\7\1\0\54\7\1\0\2\7\3\0"+
    "\1\7\2\0\27\7\252\0\26\7\12\0\32\7\106\0\70\7\6\0"+
    "\2\7\100\0\1\7\3\10\1\0\2\10\5\0\4\10\4\7\1\0"+
    "\3\7\1\0\33\7\4\0\3\10\4\0\1\10\40\0\35\7\203\0"+
    "\66\7\12\0\26\7\12\0\23\7\215\0\111\7\u03b7\0\3\10\65\7"+
    "\17\10\37\0\12\10\20\0\3\10\55\7\13\10\2\0\1\10\22\0"+
    "\31\7\7\0\12\10\6\0\3\10\44\7\16\10\1\0\12\10\100\0"+
    "\3\10\60\7\16\10\4\7\13\0\12\10\u04a6\0\53\7\15\10\10\0"+
    "\12\10\u0936\0\u036f\7\221\0\143\7\u0b9d\0\u042f\7\u33d1\0\u0239\7\u04c7\0"+
    "\105\7\13\0\1\7\56\10\20\0\4\10\15\7\u4060\0\2\7\u2163\0"+
    "\5\10\3\0\26\10\2\0\7\10\36\0\4\10\224\0\3\10\u01bb\0"+
    "\125\7\1\0\107\7\1\0\2\7\2\0\1\7\2\0\2\7\2\0"+
    "\4\7\1\0\14\7\1\0\1\7\1\0\7\7\1\0\101\7\1\0"+
    "\4\7\2\0\10\7\1\0\7\7\1\0\34\7\1\0\4\7\1\0"+
    "\5\7\1\0\1\7\3\0\7\7\1\0\u0154\7\2\0\31\7\1\0"+
    "\31\7\1\0\37\7\1\0\31\7\1\0\37\7\1\0\31\7\1\0"+
    "\37\7\1\0\31\7\1\0\37\7\1\0\31\7\1\0\10\7\2\0"+
    "\62\10\u1600\0\4\7\1\0\33\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\12\7\1\0\4\7\1\0\1\7\1\0\1\7\6\0"+
    "\1\7\4\0\1\7\1\0\1\7\1\0\1\7\1\0\3\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\1\7\2\0\4\7\1\0"+
    "\7\7\1\0\4\7\1\0\4\7\1\0\1\7\1\0\12\7\1\0"+
    "\21\7\5\0\3\7\1\0\5\7\1\0\21\7\u1144\0\ua6d7\7\51\0"+
    "\u1035\7\13\0\336\7\u3fe2\0\u021e\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\10\36\0\140\10\200\0\360\10\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\3\6\1\11\1\12\1\13\1\14\23\6\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\2\1\1\0"+
    "\1\34\1\35\14\6\2\14\1\36\4\6\1\37\21\6"+
    "\1\40\4\6\1\41\12\6\1\42\1\6\1\43\1\6"+
    "\1\44\10\6\1\45\1\6\1\46\1\6\1\47\20\6"+
    "\1\50\4\6\1\51\3\6\1\52\1\53\15\6\1\54"+
    "\3\6\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\0\2\34\1\0\6\6\1\67"+
    "\7\6\1\70\5\6\1\71\1\72\1\6\1\73\1\6"+
    "\1\74\1\75\1\76\15\6\1\77\16\6\1\100\30\6"+
    "\1\101\3\6\1\102\23\6\1\103\6\6\1\104\2\6"+
    "\1\105\15\6\1\106\3\6\1\107\7\6\1\110\14\6"+
    "\1\111\6\6\1\112\5\6\1\0\1\35\1\113\2\6"+
    "\1\114\12\6\1\115\1\116\1\117\2\6\1\120\2\6"+
    "\1\121\1\6\1\122\1\123\4\6\1\124\1\6\1\125"+
    "\3\6\1\126\1\127\1\6\1\130\1\131\2\6\1\132"+
    "\4\6\1\133\1\6\1\134\4\6\1\135\1\6\1\136"+
    "\1\137\1\6\1\140\1\141\14\6\1\142\2\6\1\143"+
    "\6\6\1\144\3\6\1\145\5\6\1\146\14\6\1\147"+
    "\5\6\1\150\6\6\1\151\1\6\1\152\5\6\1\153"+
    "\3\6\1\154\5\6\1\155\2\6\1\156\12\6\1\157"+
    "\1\6\1\160\4\6\1\161\3\6\1\162\2\6\1\163"+
    "\1\164\3\6\1\165\4\6\1\166\1\167\3\6\1\170"+
    "\1\171\2\6\1\172\3\6\1\173\2\6\1\174\2\6"+
    "\1\175\22\6\1\176\30\6\1\177\4\6\1\200\1\6"+
    "\1\201\1\202\1\6\1\203\7\6\1\204\3\6\1\205"+
    "\3\6\1\206\4\6\1\207\5\6\1\210\1\211\1\6"+
    "\1\212\1\6\1\213\3\6\1\214\17\6\1\215\1\216"+
    "\2\6\1\217\1\220\4\6\1\221\1\222\1\6\1\223"+
    "\1\6\1\224\11\6\1\225\1\226\5\6\1\227\7\6"+
    "\1\230\1\231\1\232\3\6\1\233\4\6\1\234\6\6"+
    "\1\235\1\236\1\237\1\240\15\6\1\241\6\6\1\242"+
    "\1\243\3\6\1\244\4\6\1\245\4\6\1\246\3\6"+
    "\1\247\1\6\1\250\1\251\1\6\1\252\4\6\1\253"+
    "\3\6\1\254\1\6\1\255\2\6\1\256\2\6\1\257"+
    "\4\6\1\260\1\6\1\261\1\262\5\6\1\263\2\6"+
    "\1\264\1\6\1\265\1\266\1\267\1\270\13\6\1\271"+
    "\1\272\3\6\1\273\2\6\1\274\2\6\1\275\5\6"+
    "\1\276\1\277\1\300\1\301\3\6\1\302\6\6\1\303"+
    "\1\6\1\304\1\305\4\6\1\306\4\6\1\307\4\6"+
    "\1\310\2\6\1\311\1\6\1\312\3\6\1\313\1\314"+
    "\1\6\1\315\3\6\1\316\1\317\1\6\1\320\2\6"+
    "\1\321\2\6\1\322\14\6\1\323\1\324\3\6\1\325"+
    "\4\6\1\326\1\6\1\0\1\327\1\330\1\6\1\331"+
    "\1\6\1\332\3\6\1\333\1\334\2\6\1\335\1\6"+
    "\1\336\1\6\1\337\1\340\5\6\1\341\1\342\3\6"+
    "\1\343\1\6\1\344\1\345\11\6\1\346\1\347\1\6"+
    "\1\350\2\6\1\351\10\6\1\352\1\6\1\353\1\6"+
    "\1\354\1\355\1\6\1\356\2\6\1\357\2\6\1\0"+
    "\2\6\1\360\3\6\1\361\7\6\1\362\1\363\2\6"+
    "\1\364\2\6\1\365\1\366\2\6\1\367\4\6\1\370"+
    "\3\6\1\371\2\6\1\372\17\6\1\373\1\0\1\374"+
    "\1\6\1\375\2\6\1\376\1\6\1\377\6\6\1\u0100"+
    "\1\u0101\1\6\1\u0102\1\u0103\4\6\1\u0104\1\u0105\6\6"+
    "\1\u0106\4\6\1\u0107\3\6\1\u0108\1\u0109\1\0\3\6"+
    "\1\u010a\1\u010b\1\u010c\1\u010d\1\6\1\u010e\1\u010f\6\6"+
    "\1\u0110\6\6\1\u0111\4\6\1\0\1\u0112\2\6\1\u0113"+
    "\1\6\1\u0114\1\u0115\1\u0116\3\6\1\u0117\2\6\1\u0118"+
    "\2\6\1\u0119\1\6\1\u011a\1\u011b\1\u011c\3\6\1\u011d"+
    "\1\6\1\u011e\2\6\1\u011f\1\u0120\1\u0121\1\u0122\1\u0123"+
    "\5\6\1\u0124\5\6\1\u0125\17\6\1\u0126\1\6\1\u0127"+
    "\6\6\1\u0128";

  private static int [] zzUnpackAction() {
    int [] result = new int[1181];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\76\0\370\0\u0136\0\u0174"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u01b2\0\76\0\76\0\u02aa"+
    "\0\u02e8\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a"+
    "\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a"+
    "\0\u06c8\0\u0706\0\u0744\0\76\0\76\0\76\0\u0782\0\76"+
    "\0\u07c0\0\76\0\u07fe\0\76\0\76\0\u083c\0\u087a\0\u08b8"+
    "\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8"+
    "\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98"+
    "\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\76\0\76\0\u0dce\0\u0e0c"+
    "\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc"+
    "\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec"+
    "\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc"+
    "\0\u141a\0\u0136\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e"+
    "\0\u15cc\0\u160a\0\u1648\0\u1686\0\u0136\0\u16c4\0\u1702\0\u1740"+
    "\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930"+
    "\0\u196e\0\u19ac\0\u19ea\0\u0136\0\u1a28\0\u0136\0\u1a66\0\u1aa4"+
    "\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94"+
    "\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u0136\0\u1e46"+
    "\0\u1e84\0\u1ec2\0\u1f00\0\u0136\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8"+
    "\0\u0136\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa"+
    "\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u0136\0\u235c"+
    "\0\u239a\0\u23d8\0\76\0\76\0\76\0\76\0\76\0\76"+
    "\0\76\0\76\0\76\0\76\0\u2416\0\u2454\0\76\0\u2492"+
    "\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u0136\0\u2644"+
    "\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834"+
    "\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u0136\0\u0136\0\u296a\0\u0136"+
    "\0\u29a8\0\u0136\0\u0136\0\u0136\0\u29e6\0\u2a24\0\u2a62\0\u2aa0"+
    "\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90"+
    "\0\u2cce\0\u0136\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42"+
    "\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032"+
    "\0\u0136\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4"+
    "\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4"+
    "\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a\0\u3548\0\u3586\0\u35c4"+
    "\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u3776\0\u37b4"+
    "\0\u37f2\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u3928\0\u3966\0\u39a4"+
    "\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18\0\u3b56\0\u3b94"+
    "\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08\0\u3d46\0\u3d84"+
    "\0\u0136\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8\0\u3f36"+
    "\0\u3f74\0\u3fb2\0\u3ff0\0\u402e\0\u406c\0\u40aa\0\u40e8\0\u4126"+
    "\0\u4164\0\u41a2\0\u41e0\0\u421e\0\u425c\0\u0136\0\u429a\0\u42d8"+
    "\0\u4316\0\u4354\0\u4392\0\u43d0\0\u440e\0\u0136\0\u444c\0\u448a"+
    "\0\u44c8\0\u4506\0\u4544\0\u4582\0\u45c0\0\u45fe\0\u463c\0\u467a"+
    "\0\u46b8\0\u46f6\0\u4734\0\u4772\0\u47b0\0\u47ee\0\u482c\0\u486a"+
    "\0\u48a8\0\u48e6\0\u4924\0\u4962\0\u49a0\0\u49de\0\u4a1c\0\u4a5a"+
    "\0\u4a5a\0\u4a98\0\u4ad6\0\u4b14\0\u4b52\0\u4b90\0\u4bce\0\u4c0c"+
    "\0\u4c4a\0\u4c88\0\u4cc6\0\u4d04\0\u4d42\0\u4d80\0\u4dbe\0\u0136"+
    "\0\u0136\0\u0136\0\u4dfc\0\u4e3a\0\u0136\0\u4e78\0\u4eb6\0\u0136"+
    "\0\u4ef4\0\u4f32\0\u0136\0\u4f70\0\u4fae\0\u4fec\0\u502a\0\u0136"+
    "\0\u5068\0\u0136\0\u50a6\0\u50e4\0\u5122\0\u0136\0\u0136\0\u5160"+
    "\0\u0136\0\u519e\0\u51dc\0\u521a\0\u0136\0\u5258\0\u5296\0\u52d4"+
    "\0\u5312\0\u5350\0\u538e\0\u53cc\0\u540a\0\u5448\0\u5486\0\u54c4"+
    "\0\u0136\0\u5502\0\u0136\0\u0136\0\u5540\0\u0136\0\u557e\0\u55bc"+
    "\0\u55fa\0\u5638\0\u5676\0\u56b4\0\u56f2\0\u5730\0\u576e\0\u57ac"+
    "\0\u57ea\0\u5828\0\u5866\0\u0136\0\u58a4\0\u58e2\0\u5920\0\u595e"+
    "\0\u599c\0\u59da\0\u5a18\0\u5a56\0\u5a94\0\u5ad2\0\u5b10\0\u5b4e"+
    "\0\u5b8c\0\u0136\0\u5bca\0\u5c08\0\u5c46\0\u5c84\0\u5cc2\0\u0136"+
    "\0\u5d00\0\u5d3e\0\u5d7c\0\u5dba\0\u5df8\0\u5e36\0\u5e74\0\u5eb2"+
    "\0\u5ef0\0\u5f2e\0\u5f6c\0\u5faa\0\u0136\0\u5fe8\0\u6026\0\u6064"+
    "\0\u60a2\0\u60e0\0\u0136\0\u611e\0\u615c\0\u619a\0\u61d8\0\u6216"+
    "\0\u6254\0\u0136\0\u6292\0\u0136\0\u62d0\0\u630e\0\u634c\0\u638a"+
    "\0\u63c8\0\u0136\0\u6406\0\u6444\0\u6482\0\u0136\0\u64c0\0\u64fe"+
    "\0\u653c\0\u657a\0\u65b8\0\u0136\0\u65f6\0\u6634\0\u0136\0\u6672"+
    "\0\u66b0\0\u66ee\0\u672c\0\u676a\0\u67a8\0\u67e6\0\u6824\0\u6862"+
    "\0\u68a0\0\u0136\0\u68de\0\u0136\0\u691c\0\u695a\0\u6998\0\u69d6"+
    "\0\u0136\0\u6a14\0\u6a52\0\u6a90\0\u6ace\0\u6b0c\0\u6b4a\0\u6b88"+
    "\0\u0136\0\u6bc6\0\u6c04\0\u6c42\0\u0136\0\u6c80\0\u6cbe\0\u6cfc"+
    "\0\u6d3a\0\u0136\0\u0136\0\u6d78\0\u6db6\0\u6df4\0\u0136\0\u0136"+
    "\0\u6e32\0\u6e70\0\u0136\0\u6eae\0\u6eec\0\u6f2a\0\u0136\0\u6f68"+
    "\0\u6fa6\0\u0136\0\u6fe4\0\u7022\0\u0136\0\u7060\0\u709e\0\u70dc"+
    "\0\u711a\0\u7158\0\u7196\0\u71d4\0\u7212\0\u7250\0\u728e\0\u72cc"+
    "\0\u730a\0\u7348\0\u7386\0\u73c4\0\u7402\0\u7440\0\u747e\0\u74bc"+
    "\0\u74fa\0\u7538\0\u7576\0\u75b4\0\u75f2\0\u7630\0\u766e\0\u76ac"+
    "\0\u76ea\0\u7728\0\u7766\0\u77a4\0\u77e2\0\u7820\0\u785e\0\u789c"+
    "\0\u78da\0\u7918\0\u7956\0\u7994\0\u79d2\0\u7a10\0\u7a4e\0\u7a8c"+
    "\0\u0136\0\u7aca\0\u7b08\0\u7b46\0\u7b84\0\u0136\0\u7bc2\0\u0136"+
    "\0\u0136\0\u7c00\0\u0136\0\u7c3e\0\u7c7c\0\u7cba\0\u7cf8\0\u7d36"+
    "\0\u7d74\0\u7db2\0\u0136\0\u7df0\0\u7e2e\0\u7e6c\0\u0136\0\u7eaa"+
    "\0\u7ee8\0\u7f26\0\u0136\0\u7f64\0\u7fa2\0\u7fe0\0\u801e\0\u0136"+
    "\0\u805c\0\u809a\0\u80d8\0\u8116\0\u8154\0\u8192\0\u0136\0\u81d0"+
    "\0\u0136\0\u820e\0\u0136\0\u824c\0\u828a\0\u82c8\0\u0136\0\u8306"+
    "\0\u8344\0\u8382\0\u83c0\0\u83fe\0\u843c\0\u847a\0\u84b8\0\u84f6"+
    "\0\u8534\0\u8572\0\u85b0\0\u85ee\0\u862c\0\u866a\0\u0136\0\u0136"+
    "\0\u86a8\0\u86e6\0\u0136\0\u0136\0\u8724\0\u8762\0\u87a0\0\u87de"+
    "\0\u0136\0\u0136\0\u881c\0\u0136\0\u885a\0\u0136\0\u8898\0\u88d6"+
    "\0\u8914\0\u8952\0\u8990\0\u89ce\0\u8a0c\0\u8a4a\0\u8a88\0\u0136"+
    "\0\u0136\0\u8ac6\0\u8b04\0\u8b42\0\u8b80\0\u8bbe\0\u0136\0\u8bfc"+
    "\0\u8c3a\0\u8c78\0\u8cb6\0\u8cf4\0\u8d32\0\u8d70\0\u0136\0\u8dae"+
    "\0\u0136\0\u8dec\0\u8e2a\0\u8e68\0\u0136\0\u8ea6\0\u8ee4\0\u8f22"+
    "\0\u8f60\0\u0136\0\u8f9e\0\u8fdc\0\u901a\0\u9058\0\u9096\0\u90d4"+
    "\0\u0136\0\u0136\0\u0136\0\u0136\0\u9112\0\u9150\0\u918e\0\u91cc"+
    "\0\u920a\0\u9248\0\u9286\0\u92c4\0\u9302\0\u9340\0\u937e\0\u93bc"+
    "\0\u93fa\0\u9438\0\u9476\0\u94b4\0\u94f2\0\u9530\0\u956e\0\u95ac"+
    "\0\u0136\0\u0136\0\u95ea\0\u9628\0\u9666\0\u0136\0\u96a4\0\u96e2"+
    "\0\u9720\0\u975e\0\u0136\0\u979c\0\u97da\0\u9818\0\u9856\0\u0136"+
    "\0\u9894\0\u98d2\0\u9910\0\u0136\0\u994e\0\u0136\0\u0136\0\u998c"+
    "\0\u0136\0\u99ca\0\u9a08\0\u9a46\0\u9a84\0\u0136\0\u9ac2\0\u9b00"+
    "\0\u9b3e\0\u0136\0\u9b7c\0\u0136\0\u9bba\0\u9bf8\0\u0136\0\u9c36"+
    "\0\u9c74\0\u0136\0\u9cb2\0\u9cf0\0\u9d2e\0\u9d6c\0\u0136\0\u9daa"+
    "\0\u9de8\0\u9e26\0\u9e64\0\u9ea2\0\u9ee0\0\u9f1e\0\u9f5c\0\u0136"+
    "\0\u9f9a\0\u9fd8\0\u0136\0\ua016\0\u0136\0\u0136\0\u0136\0\u0136"+
    "\0\ua054\0\ua092\0\ua0d0\0\ua10e\0\ua14c\0\ua18a\0\ua1c8\0\ua206"+
    "\0\ua244\0\ua282\0\ua2c0\0\u0136\0\u0136\0\ua2fe\0\ua33c\0\ua37a"+
    "\0\u0136\0\ua3b8\0\ua3f6\0\u0136\0\ua434\0\ua472\0\u0136\0\ua4b0"+
    "\0\ua4ee\0\ua52c\0\ua56a\0\ua5a8\0\u0136\0\u0136\0\u0136\0\u0136"+
    "\0\ua5e6\0\ua624\0\ua662\0\u0136\0\ua6a0\0\ua6de\0\ua71c\0\ua75a"+
    "\0\ua798\0\ua7d6\0\u0136\0\ua814\0\u0136\0\u0136\0\ua852\0\ua890"+
    "\0\ua8ce\0\ua90c\0\u0136\0\ua94a\0\ua988\0\ua9c6\0\uaa04\0\u0136"+
    "\0\uaa42\0\uaa80\0\uaabe\0\uaafc\0\u0136\0\uab3a\0\uab78\0\u0136"+
    "\0\uabb6\0\u0136\0\uabf4\0\uac32\0\uac70\0\u0136\0\uacae\0\uacec"+
    "\0\u0136\0\uad2a\0\uad68\0\uada6\0\u0136\0\u0136\0\uade4\0\u0136"+
    "\0\uae22\0\uae60\0\u0136\0\uae9e\0\uaedc\0\u0136\0\uaf1a\0\uaf58"+
    "\0\uaf96\0\uafd4\0\ub012\0\ub050\0\ub08e\0\ub0cc\0\ub10a\0\ub148"+
    "\0\ub186\0\ub1c4\0\u0136\0\u0136\0\ub202\0\ub240\0\ub27e\0\u0136"+
    "\0\ub2bc\0\ub2fa\0\ub338\0\ub376\0\u0136\0\ub3b4\0\ub3f2\0\u0136"+
    "\0\u0136\0\ub430\0\u0136\0\ub46e\0\u0136\0\ub4ac\0\ub4ea\0\ub528"+
    "\0\u0136\0\ub566\0\ub5a4\0\ub5e2\0\u0136\0\ub620\0\u0136\0\ub65e"+
    "\0\u0136\0\u0136\0\ub69c\0\ub6da\0\ub718\0\ub756\0\ub794\0\u0136"+
    "\0\u0136\0\ub7d2\0\ub810\0\ub84e\0\u0136\0\ub88c\0\u0136\0\u0136"+
    "\0\ub8ca\0\ub908\0\ub946\0\ub984\0\ub9c2\0\uba00\0\uba3e\0\uba7c"+
    "\0\ubaba\0\ubaf8\0\u0136\0\ubb36\0\u0136\0\ubb74\0\ubbb2\0\ubbf0"+
    "\0\ubc2e\0\ubc6c\0\ubcaa\0\ubce8\0\ubd26\0\ubd64\0\ubda2\0\ubde0"+
    "\0\u0136\0\ube1e\0\u0136\0\ube5c\0\u0136\0\u0136\0\ube9a\0\ubed8"+
    "\0\ubf16\0\ubf54\0\u0136\0\ubf92\0\ubfd0\0\uc00e\0\uc04c\0\uc08a"+
    "\0\u0136\0\uc0c8\0\uc106\0\uc144\0\u0136\0\uc182\0\uc1c0\0\uc1fe"+
    "\0\uc23c\0\uc27a\0\uc2b8\0\uc2f6\0\u0136\0\u0136\0\uc334\0\uc372"+
    "\0\u0136\0\uc3b0\0\uc3ee\0\u0136\0\u0136\0\uc42c\0\uc46a\0\u0136"+
    "\0\uc4a8\0\uc4e6\0\uc524\0\uc562\0\u0136\0\uc5a0\0\uc5de\0\uc61c"+
    "\0\u0136\0\uc65a\0\uc698\0\u0136\0\uc6d6\0\uc714\0\uc752\0\uc790"+
    "\0\uc7ce\0\uc80c\0\uc84a\0\uc888\0\uc8c6\0\uc904\0\uc942\0\uc980"+
    "\0\uc9be\0\uc9fc\0\uca3a\0\u0136\0\uca78\0\u0136\0\ucab6\0\u0136"+
    "\0\ucaf4\0\ucb32\0\u0136\0\ucb70\0\u0136\0\ucbae\0\ucbec\0\ucc2a"+
    "\0\ucc68\0\ucca6\0\ucce4\0\u0136\0\u0136\0\ucd22\0\u0136\0\u0136"+
    "\0\ucd60\0\ucd9e\0\ucddc\0\uce1a\0\u0136\0\u0136\0\uce58\0\uce96"+
    "\0\uced4\0\ucf12\0\ucf50\0\ucf8e\0\u0136\0\ucfcc\0\ud00a\0\ud048"+
    "\0\ud086\0\u0136\0\ud0c4\0\ud102\0\ud140\0\u0136\0\u0136\0\ud17e"+
    "\0\ud1bc\0\ud1fa\0\ud238\0\u0136\0\u0136\0\u0136\0\u0136\0\ud276"+
    "\0\u0136\0\u0136\0\ud2b4\0\ud2f2\0\ud330\0\ud36e\0\ud3ac\0\ud3ea"+
    "\0\u0136\0\ud428\0\ud466\0\ud4a4\0\ud4e2\0\ud520\0\ud55e\0\u0136"+
    "\0\ud59c\0\ud5da\0\ud618\0\ud656\0\ud694\0\u0136\0\ud6d2\0\ud710"+
    "\0\u0136\0\ud74e\0\u0136\0\u0136\0\ud78c\0\ud7ca\0\ud808\0\ud846"+
    "\0\u0136\0\ud884\0\ud8c2\0\u0136\0\ud900\0\ud93e\0\u0136\0\ud97c"+
    "\0\u0136\0\76\0\u0136\0\ud9ba\0\ud9f8\0\uda36\0\u0136\0\uda74"+
    "\0\u0136\0\udab2\0\udaf0\0\u0136\0\u0136\0\u0136\0\u0136\0\u0136"+
    "\0\udb2e\0\udb6c\0\udbaa\0\udbe8\0\udc26\0\u0136\0\udc64\0\udca2"+
    "\0\udce0\0\udd1e\0\udd5c\0\u0136\0\udd9a\0\uddd8\0\ude16\0\ude54"+
    "\0\ude92\0\uded0\0\udf0e\0\udf4c\0\udf8a\0\udfc8\0\ue006\0\ue044"+
    "\0\ue082\0\ue0c0\0\ue0fe\0\u0136\0\ue13c\0\u0136\0\ue17a\0\ue1b8"+
    "\0\ue1f6\0\ue234\0\ue272\0\ue2b0\0\u0136";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1181];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\7"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\7\1\17"+
    "\1\20\1\21\1\22\1\23\1\7\1\24\1\25\1\26"+
    "\1\27\1\30\1\7\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\7\1\42\1\43\1\7"+
    "\1\3\1\15\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\100\0\3\3\46\0\1\3\30\0"+
    "\1\65\76\0\1\66\76\0\10\7\1\0\1\7\2\0"+
    "\27\7\1\0\1\7\31\0\10\10\1\0\1\10\2\0"+
    "\27\10\1\0\1\10\31\0\3\10\1\15\3\10\1\15"+
    "\1\67\1\10\2\0\27\10\1\0\1\15\31\0\5\7"+
    "\1\70\2\7\1\0\1\7\2\0\1\71\3\7\1\72"+
    "\2\7\1\73\1\74\13\7\1\75\2\7\1\0\1\7"+
    "\31\0\4\7\1\76\3\7\1\0\1\7\2\0\6\7"+
    "\1\77\4\7\1\100\13\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\101\4\7\1\102\2\7"+
    "\1\103\14\7\1\0\1\7\22\0\1\20\1\104\1\105"+
    "\17\20\1\106\53\20\7\0\4\7\1\107\1\110\1\111"+
    "\1\7\1\0\1\7\2\0\1\7\1\112\11\7\1\113"+
    "\10\7\1\114\2\7\1\0\1\7\31\0\5\7\1\115"+
    "\2\7\1\0\1\7\2\0\1\116\1\7\1\117\2\7"+
    "\1\120\1\7\1\121\1\7\1\122\1\123\3\7\1\124"+
    "\10\7\1\0\1\7\31\0\4\7\1\125\1\7\1\126"+
    "\1\7\1\0\1\7\2\0\3\7\1\127\1\7\1\130"+
    "\5\7\1\131\13\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\1\132\1\7\1\133\2\7\1\134\1\7"+
    "\1\135\1\7\1\136\1\137\1\140\1\141\1\7\1\142"+
    "\10\7\1\0\1\7\31\0\5\7\1\143\2\7\1\0"+
    "\1\7\2\0\1\144\1\7\1\145\4\7\1\146\2\7"+
    "\1\147\14\7\1\0\1\7\31\0\5\7\1\150\1\151"+
    "\1\7\1\0\1\7\2\0\2\7\1\152\2\7\1\153"+
    "\4\7\1\154\14\7\1\0\1\7\31\0\4\7\1\155"+
    "\1\156\2\7\1\0\1\7\2\0\5\7\1\157\1\160"+
    "\11\7\1\161\1\162\2\7\1\163\2\7\1\0\1\7"+
    "\31\0\5\7\1\164\1\165\1\7\1\0\1\7\2\0"+
    "\1\166\4\7\1\167\1\7\1\170\4\7\1\171\12\7"+
    "\1\0\1\7\31\0\4\7\1\172\3\7\1\0\1\7"+
    "\2\0\1\7\1\173\11\7\1\174\1\7\1\175\2\7"+
    "\1\176\6\7\1\0\1\7\31\0\5\7\1\177\2\7"+
    "\1\0\1\7\2\0\1\200\1\7\1\201\1\7\1\202"+
    "\2\7\1\203\1\204\1\205\1\206\1\7\1\207\1\210"+
    "\11\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\1\211\6\7\1\212\17\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\1\213\1\7\1\214\4\7\1\215"+
    "\2\7\1\216\3\7\1\217\10\7\1\0\1\7\31\0"+
    "\5\7\1\220\2\7\1\0\1\7\2\0\1\221\1\7"+
    "\1\222\2\7\1\223\3\7\1\224\1\225\14\7\1\0"+
    "\1\7\31\0\6\7\1\226\1\7\1\0\1\7\2\0"+
    "\5\7\1\227\1\7\1\230\6\7\1\231\10\7\1\0"+
    "\1\7\31\0\5\7\1\232\1\233\1\7\1\0\1\7"+
    "\2\0\1\234\1\7\1\235\2\7\1\236\1\7\1\237"+
    "\2\7\1\240\14\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\1\241\4\7\1\242\4\7\1\243\1\7"+
    "\1\244\12\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\245\7\7\1\246\3\7\1\247\10\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\1\250"+
    "\11\7\1\251\14\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\7\7\1\252\17\7\1\0\1\7\102\0"+
    "\1\253\77\0\1\254\77\0\1\255\77\0\1\256\77\0"+
    "\1\257\75\0\1\260\75\0\1\261\75\0\1\262\100\0"+
    "\1\263\76\0\1\264\1\0\5\65\1\265\70\65\1\66"+
    "\1\266\1\267\73\66\12\0\1\67\3\0\1\67\1\0"+
    "\1\270\4\0\1\270\25\0\1\67\31\0\6\7\1\271"+
    "\1\7\1\0\1\7\2\0\15\7\1\272\11\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\4\7\1\273"+
    "\10\7\1\274\11\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\2\7\1\275\24\7\1\0\1\7\31\0"+
    "\4\7\1\276\3\7\1\0\1\7\2\0\4\7\1\277"+
    "\3\7\1\300\16\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\14\7\1\301\12\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\1\302\26\7\1\0\1\7"+
    "\31\0\6\7\1\303\1\7\1\0\1\7\2\0\6\7"+
    "\1\304\3\7\1\305\14\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\1\7\1\306\25\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\2\7\1\307\24\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\20\7"+
    "\1\310\6\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\1\311\7\7\1\312\16\7\1\0\1\7\31\0"+
    "\4\7\1\313\3\7\1\0\1\7\2\0\22\7\1\314"+
    "\4\7\1\0\1\7\24\0\1\105\102\0\10\7\1\0"+
    "\1\7\2\0\1\7\1\315\7\7\1\316\15\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\4\7\1\317"+
    "\22\7\1\0\1\7\31\0\6\7\1\320\1\7\1\0"+
    "\1\7\2\0\4\7\1\321\22\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\1\7\1\322\25\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\10\7\1\323"+
    "\16\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\17\7\1\324\7\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\15\7\1\325\11\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\4\7\1\326\22\7\1\0"+
    "\1\7\31\0\4\7\1\327\1\7\1\330\1\7\1\0"+
    "\1\7\2\0\1\331\7\7\1\332\2\7\1\333\4\7"+
    "\1\334\6\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\7\7\1\335\17\7\1\0\1\7\31\0\5\7"+
    "\1\336\2\7\1\0\1\7\2\0\27\7\1\0\1\7"+
    "\31\0\4\7\1\337\3\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\13\7"+
    "\1\340\13\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\10\7\1\341\16\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\1\7\1\342\6\7\1\343\16\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\13\7"+
    "\1\344\13\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\345\1\7\1\346\3\7\1\347\1\7"+
    "\1\350\14\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\5\7\1\351\21\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\10\7\1\352\16\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\16\7\1\353\10\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\3\7"+
    "\1\354\23\7\1\0\1\7\31\0\5\7\1\355\2\7"+
    "\1\0\1\7\2\0\1\356\10\7\1\357\1\360\14\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\6\7"+
    "\1\361\20\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\6\7\1\362\20\7\1\0\1\7\31\0\4\7"+
    "\1\363\3\7\1\0\1\7\2\0\15\7\1\364\11\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\365\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\366\24\7\1\0\1\7\31\0\6\7"+
    "\1\367\1\7\1\0\1\7\2\0\27\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\12\7\1\370\14\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\1\371"+
    "\3\7\1\372\1\7\1\373\1\7\1\374\2\7\1\375"+
    "\4\7\1\376\3\7\1\377\2\7\1\0\1\7\31\0"+
    "\6\7\1\u0100\1\7\1\0\1\7\2\0\21\7\1\u0101"+
    "\5\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\17\7\1\u0102\7\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\16\7\1\u0103\10\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\1\u0104\26\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\5\7\1\u0105\21\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u0106\4\7\1\u0107\2\7\1\u0108\14\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\24\7\1\u0109\2\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u010a\22\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\1\7\1\u010b\25\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u010c\1\7\1\u010d\22\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\20\7"+
    "\1\u010e\6\7\1\0\1\7\31\0\4\7\1\u010f\3\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u0110\24\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\5\7\1\u0111\21\7"+
    "\1\0\1\7\31\0\5\7\1\u0112\2\7\1\0\1\7"+
    "\2\0\7\7\1\u0113\17\7\1\0\1\7\31\0\6\7"+
    "\1\u0114\1\7\1\0\1\7\2\0\13\7\1\u0115\13\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u0116\4\7\1\u0117\17\7\1\0\1\7\31\0\4\7"+
    "\1\u0118\1\u0119\1\u011a\1\7\1\0\1\7\2\0\1\u011b"+
    "\14\7\1\u011c\11\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\1\u011d\1\7\1\u011e\24\7\1\0\1\7"+
    "\31\0\4\7\1\u011f\1\7\1\u0120\1\7\1\0\1\7"+
    "\2\0\1\7\1\u0121\2\7\1\u0122\1\7\1\u0123\1\7"+
    "\1\u0124\2\7\1\u0125\13\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u0126\24\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\1\u0127\14\7\1\u0128"+
    "\11\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\15\7\1\u0129\11\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\24\7\1\u012a\2\7\1\0\1\7\31\0"+
    "\6\7\1\u012b\1\7\1\0\1\7\2\0\4\7\1\u012c"+
    "\3\7\1\u012d\2\7\1\u012e\1\7\1\u012f\11\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\1\u0130\26\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\15\7"+
    "\1\u0131\11\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\5\7\1\u0132\6\7\1\u0133\12\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\13\7\1\u0134\13\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\23\7"+
    "\1\u0135\3\7\1\0\1\7\31\0\5\7\1\u0136\2\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\1\u0137\26\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\24\7\1\u0138\2\7\1\0"+
    "\1\7\31\0\6\7\1\u0139\1\7\1\0\1\7\2\0"+
    "\27\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\3\7\1\u013a\1\7\1\u013b\21\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\5\7\1\u013c\21\7\1\0"+
    "\1\7\31\0\4\7\1\u013d\3\7\1\0\1\7\2\0"+
    "\27\7\1\0\1\7\31\0\4\7\1\u013e\3\7\1\0"+
    "\1\7\2\0\27\7\1\0\1\7\31\0\6\7\1\u013f"+
    "\1\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\10\7\1\u0140\16\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\4\7\1\u0141"+
    "\12\7\1\u0142\7\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\2\7\1\u0143\4\7\1\u0144\17\7\1\0"+
    "\1\7\31\0\4\7\1\u0145\3\7\1\0\1\7\2\0"+
    "\4\7\1\u0146\12\7\1\u0147\7\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\7\7\1\u0148\17\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\1\u0149\6\7"+
    "\1\u014a\17\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\4\7\1\u014b\22\7\1\0\1\7\31\0\4\7"+
    "\1\u014c\1\7\1\u014d\1\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\7\7"+
    "\1\u014e\17\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\13\7\1\u014f\13\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\4\7\1\u0150\22\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\2\7\1\u0151\4\7"+
    "\1\u0152\17\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\5\7\1\u0153\21\7\1\0\1\7\31\0\6\7"+
    "\1\u0154\1\7\1\0\1\7\2\0\27\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\12\7\1\u0155\14\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\12\7"+
    "\1\u0156\14\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\4\7\1\u0157\22\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u0158\7\7\1\u0159\14\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\11\7"+
    "\1\u015a\15\7\1\0\1\7\31\0\6\7\1\u015b\1\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\6\7"+
    "\1\u015c\1\7\1\0\1\7\2\0\5\7\1\u015d\21\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u015e\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\12\7\1\u015f\14\7\1\0\1\7\22\0\4\65"+
    "\1\267\1\265\70\65\2\0\1\267\101\0\1\u0160\3\0"+
    "\1\u0161\3\0\1\u0161\2\0\1\u0160\31\0\1\u0161\31\0"+
    "\6\7\1\u0162\1\7\1\0\1\7\2\0\27\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\2\7\1\u0163"+
    "\24\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\12\7\1\u0164\14\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\2\7\1\u0165\24\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\3\7\1\u0166\23\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\10\7\1\u0167"+
    "\16\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\14\7\1\u0168\12\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\1\u0169\26\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\5\7\1\u016a\21\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\12\7\1\u016b\14\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\12\7"+
    "\1\u016c\14\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\7\7\1\u016d\16\7\1\u016e\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\1\u016f\26\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\5\7\1\u0170\21\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u0171\22\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\1\7\1\u0172\25\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\1\u0173\26\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\2\7\1\u0174\24\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\2\7\1\u0175"+
    "\24\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\14\7\1\u0176\12\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\2\7\1\u0177\24\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\6\7\1\u0178\20\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\1\u0179\1\7"+
    "\1\u017a\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\11\7\1\u017b\15\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u017c\24\7\1\0\1\7"+
    "\31\0\6\7\1\u017d\1\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\6\7\1\u017e\1\7\1\0\1\7"+
    "\2\0\12\7\1\u017f\14\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\10\7\1\u0180\16\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\1\u0181\26\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\6\7\1\u0182"+
    "\20\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\16\7\1\u0183\10\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\1\u0184\26\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\4\7\1\u0185\15\7\1\u0186\4\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\10\7"+
    "\1\u0187\16\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\5\7\1\u0188\21\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u0189\24\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\10\7\1\u018a\16\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u018b\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\u018c\24\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\4\7\1\u018d\6\7\1\u018e\13\7"+
    "\1\0\1\7\31\0\6\7\1\u018f\1\7\1\0\1\7"+
    "\2\0\27\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\1\u0190\26\7\1\0\1\7\31\0\6\7\1\u0191"+
    "\1\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\4\7\1\u0192\22\7\1\0"+
    "\1\7\31\0\4\7\1\u0193\3\7\1\0\1\7\2\0"+
    "\27\7\1\0\1\7\31\0\4\7\1\u0194\3\7\1\0"+
    "\1\7\2\0\27\7\1\0\1\7\31\0\2\7\1\u0195"+
    "\5\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\17\7\1\u0196\7\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\2\7\1\u0197"+
    "\24\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\11\7\1\u0198\15\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\2\7\1\u0199\24\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\26\7\1\u019a\1\0\1\7"+
    "\31\0\4\7\1\u019b\3\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u019c\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\13\7\1\u019d\13\7\1\0\1\7\31\0\6\7"+
    "\1\u019e\1\7\1\0\1\7\2\0\1\7\1\u019f\25\7"+
    "\1\0\1\7\31\0\5\7\1\u01a0\2\7\1\0\1\7"+
    "\2\0\27\7\1\0\1\7\31\0\6\7\1\u01a1\1\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\7\7\1\u01a2\17\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\4\7\1\u01a3\22\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u01a4\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\u01a5\4\7\1\u01a6\17\7\1\0\1\7"+
    "\31\0\6\7\1\u01a7\1\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\10\7"+
    "\1\u01a8\6\7\1\u01a9\7\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\14\7\1\u01aa\12\7\1\0\1\7"+
    "\31\0\6\7\1\u01ab\1\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\4\7\1\u01ac\3\7\1\0\1\7"+
    "\2\0\27\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\10\7\1\u01ad\16\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\10\7\1\u01ae\16\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\10\7\1\u01af\16\7"+
    "\1\0\1\7\31\0\4\7\1\u01b0\3\7\1\0\1\7"+
    "\2\0\15\7\1\u01b1\11\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\7\7\1\u01b2\17\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\2\7\1\u01b3\3\7"+
    "\1\u01b4\20\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\u01b5\24\7\1\0\1\7\31\0\4\7"+
    "\1\u01b6\3\7\1\0\1\7\2\0\27\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\12\7\1\u01b7\14\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\13\7"+
    "\1\u01b8\13\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\u01b9\24\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\5\7\1\u01ba\21\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\5\7\1\u01bb\5\7"+
    "\1\u01bc\13\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\13\7\1\u01bd\13\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\13\7\1\u01be\13\7\1\0\1\7"+
    "\31\0\6\7\1\u01bf\1\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u01c0\5\7\1\u01c1\16\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\1\u01c2\26\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\13\7\1\u01c3\13\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\4\7\1\u01c4"+
    "\6\7\1\u01c5\10\7\1\u01c6\2\7\1\0\1\7\31\0"+
    "\4\7\1\u01c7\3\7\1\0\1\7\2\0\27\7\1\0"+
    "\1\7\31\0\5\7\1\u01c8\1\u01c9\1\7\1\0\1\7"+
    "\2\0\27\7\1\0\1\7\31\0\6\7\1\u01ca\1\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\6\7\1\u01cb\6\7\1\u01cc\11\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\5\7"+
    "\1\u01cd\21\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\10\7\1\u01ce\16\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u01cf\24\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\12\7\1\u01d0\14\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u01d1\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\u01d2\4\7\1\u01d3\17\7\1\0\1\7"+
    "\31\0\5\7\1\u01d4\2\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\6\7\1\u01d5\1\7\1\0\1\7"+
    "\2\0\27\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\u01d6\24\7\1\0\1\7\31\0\4\7"+
    "\1\u01d7\3\7\1\0\1\7\2\0\27\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\17\7\1\u01d8\7\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u01d9\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\u01da\24\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u01db\15\7\1\u01dc\6\7"+
    "\1\0\1\7\31\0\5\7\1\u01dd\2\7\1\0\1\7"+
    "\2\0\27\7\1\0\1\7\31\0\5\7\1\u01de\2\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\13\7\1\u01df\13\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\1\u01e0\26\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\4\7\1\u01e1"+
    "\22\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\2\7\1\u01e2\24\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\7\7\1\u01e3\17\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\2\7\1\u01e4\24\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\4\7\1\u01e5"+
    "\22\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\2\7\1\u01e6\24\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\4\7\1\u01e7\22\7\1\0\1\7\31\0"+
    "\6\7\1\u01e8\1\7\1\0\1\7\2\0\27\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\12\7\1\u01e9"+
    "\14\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\1\7\1\u01ea\25\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\13\7\1\u01eb\13\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\22\7\1\u01ec\4\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\17\7\1\u01ed"+
    "\7\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\2\7\1\u01ee\24\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\22\7\1\u01ef\4\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\22\7\1\u01f0\4\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\21\7\1\u01f1"+
    "\5\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\12\7\1\u01f2\14\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\1\u01f3\26\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\21\7\1\u01f4\5\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\1\u01f5\26\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\12\7\1\u01f6"+
    "\14\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\16\7\1\u01f7\10\7\1\0\1\7\31\0\4\7\1\u01f8"+
    "\3\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\5\7\1\u01f9\2\7\1\0\1\7\2\0\27\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\7\7\1\u01fa"+
    "\17\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\10\7\1\u01fb\16\7\1\0\1\7\31\0\6\7\1\u01fc"+
    "\1\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\1\u01fd\26\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\4\7\1\u01fe\22\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\10\7"+
    "\1\u01ff\16\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\u0200\24\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\15\7\1\u0201\11\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\2\7\1\u0202\16\7"+
    "\1\u0203\5\7\1\0\1\7\31\0\6\7\1\u0204\1\7"+
    "\1\0\1\7\2\0\2\7\1\u0205\24\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\4\7\1\u0206\22\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u0207\22\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\14\7\1\u0208\12\7\1\0\1\7\31\0\4\7"+
    "\1\u0209\3\7\1\0\1\7\2\0\5\7\1\u020a\21\7"+
    "\1\0\1\7\31\0\6\7\1\u020b\1\7\1\0\1\7"+
    "\2\0\27\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\13\7\1\u020c\13\7\1\0\1\7\31\0\6\7"+
    "\1\u020d\1\7\1\0\1\7\2\0\27\7\1\0\1\7"+
    "\31\0\5\7\1\u020e\2\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\10\7"+
    "\1\u020f\1\u0210\4\7\1\u0211\10\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\21\7\1\u0212\5\7\1\0"+
    "\1\7\31\0\4\7\1\u0213\3\7\1\0\1\7\2\0"+
    "\27\7\1\0\1\7\34\0\1\u0161\3\0\1\u0161\34\0"+
    "\1\u0161\31\0\10\7\1\0\1\7\2\0\12\7\1\u0214"+
    "\14\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\5\7\1\u0215\21\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\7\7\1\u0216\17\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\13\7\1\u0217\13\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\4\7\1\u0218"+
    "\22\7\1\0\1\7\31\0\6\7\1\u0219\1\7\1\0"+
    "\1\7\2\0\27\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\2\7\1\u021a\24\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\5\7\1\u021b\21\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\10\7\1\u021c"+
    "\16\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\15\7\1\u021d\11\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\24\7\1\u021e\2\7\1\0\1\7\31\0"+
    "\4\7\1\u021f\3\7\1\0\1\7\2\0\27\7\1\0"+
    "\1\7\31\0\5\7\1\u0220\2\7\1\0\1\7\2\0"+
    "\27\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\4\7\1\u0221\22\7\1\0\1\7\31\0\6\7\1\u0222"+
    "\1\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\4\7\1\u0223\3\7\1\0\1\7\2\0\27\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\7\7\1\u0224"+
    "\17\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\5\7\1\u0225\21\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\16\7\1\u0226\10\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\4\7\1\u0227\22\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\4\7\1\u0228"+
    "\22\7\1\0\1\7\31\0\6\7\1\u0229\1\7\1\0"+
    "\1\7\2\0\27\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\1\u022a\26\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\15\7\1\u022b\11\7\1\0\1\7"+
    "\31\0\5\7\1\u022c\2\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\6\7\1\u022d\1\7\1\0\1\7"+
    "\2\0\27\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\15\7\1\u022e\11\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\5\7\1\u022f\4\7\1\u0230\14\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\11\7"+
    "\1\u0231\15\7\1\0\1\7\31\0\5\7\1\u0232\2\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\5\7\1\u0233\21\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\6\7\1\u0234\20\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u0235\22\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\24\7\1\u0236\2\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\6\7\1\u0237\20\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\2\7\1\u0238\24\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\13\7"+
    "\1\u0239\13\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\10\7\1\u023a\16\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\13\7\1\u023b\13\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\10\7\1\u023c\16\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\17\7"+
    "\1\u023d\7\7\1\0\1\7\31\0\2\7\1\u023e\5\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\12\7\1\u023f\14\7\1\0\1\7"+
    "\31\0\5\7\1\u0240\2\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u0241\24\7\1\0\1\7\31\0\2\7\1\u0242\5\7"+
    "\1\0\1\7\2\0\4\7\1\u0243\2\7\1\u0244\17\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\5\7"+
    "\1\u0245\21\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\12\7\1\u0246\14\7\1\0\1\7\31\0\4\7"+
    "\1\u0247\3\7\1\0\1\7\2\0\15\7\1\u0248\11\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\5\7"+
    "\1\u0249\1\7\1\u024a\17\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\5\7\1\u024b\21\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\5\7\1\u024c\21\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\22\7"+
    "\1\u024d\4\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\16\7\1\u024e\10\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\7\7\1\u024f\17\7\1\0\1\7"+
    "\31\0\5\7\1\u0250\2\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u0251\22\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\12\7\1\u0252\14\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u0253\24\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\12\7\1\u0254\14\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u0255\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\4\7\1\u0256\22\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\1\u0257\26\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\4\7\1\u0258\22\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\5\7\1\u0259"+
    "\21\7\1\0\1\7\31\0\5\7\1\u025a\2\7\1\0"+
    "\1\7\2\0\27\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\5\7\1\u025b\21\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\1\7\1\u025c\1\7\1\u025d"+
    "\1\7\1\u025e\20\7\1\u025f\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\7\7\1\u0260\5\7\1\u0261\11\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u0262\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\5\7\1\u0263\21\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u0264\24\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\7\7\1\u0265\17\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u0266\22\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\u0267\24\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u0268\24\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\1\u0269\26\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\4\7\1\u026a"+
    "\22\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\13\7\1\u026b\13\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\1\u026c\11\7\1\u026d\14\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\4\7\1\u026e\22\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u026f\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\4\7\1\u0270\22\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\15\7\1\u0271\11\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\1\u0272\26\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\2\7\1\u0273"+
    "\24\7\1\0\1\7\31\0\5\7\1\u0274\2\7\1\0"+
    "\1\7\2\0\27\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\12\7\1\u0275\14\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\22\7\1\u0276\4\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\5\7\1\u0277"+
    "\21\7\1\0\1\7\31\0\4\7\1\u0278\3\7\1\0"+
    "\1\7\2\0\27\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\3\7\1\u0279\23\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\5\7\1\u027a\21\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\4\7\1\u027b"+
    "\22\7\1\0\1\7\31\0\5\7\1\u027c\2\7\1\0"+
    "\1\7\2\0\27\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\5\7\1\u027d\21\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\4\7\1\u027e\22\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\2\7\1\u027f"+
    "\24\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\1\7\1\u0280\25\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\10\7\1\u0281\16\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\13\7\1\u0282\13\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\5\7\1\u0283"+
    "\21\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\12\7\1\u0284\14\7\1\0\1\7\31\0\4\7\1\u0285"+
    "\3\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\12\7\1\u0286\14\7\1\0"+
    "\1\7\31\0\6\7\1\u0287\1\7\1\0\1\7\2\0"+
    "\27\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\15\7\1\u0288\11\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\2\7\1\u0289\24\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\1\7\1\u028a\25\7\1\0"+
    "\1\7\31\0\6\7\1\u028b\1\7\1\0\1\7\2\0"+
    "\27\7\1\0\1\7\31\0\4\7\1\u028c\3\7\1\0"+
    "\1\7\2\0\27\7\1\0\1\7\31\0\6\7\1\u028d"+
    "\1\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\12\7\1\u028e\14\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\2\7\1\u028f"+
    "\24\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\11\7\1\u0290\15\7\1\0\1\7\31\0\5\7\1\u0291"+
    "\2\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\2\7\1\u0292\24\7\1\0"+
    "\1\7\31\0\4\7\1\u0293\3\7\1\0\1\7\2\0"+
    "\27\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\22\7\1\u0294\4\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\13\7\1\u0295\13\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\5\7\1\u0296\21\7\1\0"+
    "\1\7\31\0\4\7\1\u0297\3\7\1\0\1\7\2\0"+
    "\27\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\1\u0298\26\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\4\7\1\u0299\22\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\6\7\1\u029a\20\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\4\7\1\u029b\22\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u029c\22\7\1\0\1\7\31\0\2\7\1\u029d\5\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\14\7\1\u029e\12\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\4\7\1\u029f\22\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\12\7"+
    "\1\u02a0\14\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\1\u02a1\26\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\20\7\1\u02a2\6\7\1\0\1\7\31\0"+
    "\4\7\1\u02a3\3\7\1\0\1\7\2\0\17\7\1\u02a4"+
    "\7\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\20\7\1\u02a5\6\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\2\7\1\u02a6\24\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\12\7\1\u02a7\14\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\2\7\1\u02a8"+
    "\24\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\2\7\1\u02a9\24\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\2\7\1\u02aa\24\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\2\7\1\u02ab\24\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\14\7\1\u02ac"+
    "\12\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\12\7\1\u02ad\14\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\12\7\1\u02ae\14\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\20\7\1\u02af\6\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\12\7\1\u02b0"+
    "\14\7\1\0\1\7\31\0\4\7\1\u02b1\3\7\1\0"+
    "\1\7\2\0\27\7\1\0\1\7\31\0\5\7\1\u02b2"+
    "\2\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\10\7\1\u02b3\16\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\14\7\1\u02b4"+
    "\12\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\12\7\1\u02b5\14\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\7\7\1\u02b6\17\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\2\7\1\u02b7\24\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\2\7\1\u02b8"+
    "\24\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\7\7\1\u02b9\17\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\5\7\1\u02ba\21\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\1\u02bb\26\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\12\7\1\u02bc\14\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u02bd\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\7\7\1\u02be\17\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\5\7\1\u02bf\21\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\1\u02c0\26\7\1\0"+
    "\1\7\31\0\6\7\1\u02c1\1\7\1\0\1\7\2\0"+
    "\27\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\2\7\1\u02c2\24\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\12\7\1\u02c3\14\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\12\7\1\u02c4\14\7\1\0"+
    "\1\7\31\0\4\7\1\u02c5\3\7\1\0\1\7\2\0"+
    "\27\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\6\7\1\u02c6\20\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\4\7\1\u02c7\22\7\1\0\1\7\31\0"+
    "\4\7\1\u02c8\3\7\1\0\1\7\2\0\27\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\4\7\1\u02c9"+
    "\22\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\13\7\1\u02ca\13\7\1\0\1\7\31\0\6\7\1\u02cb"+
    "\1\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\2\7\1\u02cc\24\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\13\7\1\u02cd"+
    "\13\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\12\7\1\u02ce\14\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\1\u02cf\26\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\1\u02d0\26\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\7\7\1\u02d1\17\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\2\7\1\u02d2"+
    "\24\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\21\7\1\u02d3\5\7\1\0\1\7\31\0\4\7\1\u02d4"+
    "\3\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\1\u02d5\26\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\5\7\1\u02d6\21\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\7\7"+
    "\1\u02d7\17\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\u02d8\24\7\1\0\1\7\31\0\4\7"+
    "\1\u02d9\3\7\1\0\1\7\2\0\27\7\1\0\1\7"+
    "\31\0\4\7\1\u02da\3\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\10\7"+
    "\1\u02db\16\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\20\7\1\u02dc\6\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\6\7\1\u02dd\20\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\12\7\1\u02de\14\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\5\7"+
    "\1\u02df\21\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\u02e0\24\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\4\7\1\u02e1\22\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\2\7\1\u02e2\24\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\1\u02e3"+
    "\26\7\1\0\1\7\31\0\5\7\1\u02e4\2\7\1\0"+
    "\1\7\2\0\27\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\12\7\1\u02e5\14\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\10\7\1\u02e6\16\7\1\0"+
    "\1\7\31\0\4\7\1\u02e7\3\7\1\0\1\7\2\0"+
    "\27\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\13\7\1\u02e8\13\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\1\7\1\u02e9\25\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\5\7\1\u02ea\21\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\4\7\1\u02eb"+
    "\22\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\1\u02ec\26\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\15\7\1\u02ed\11\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\7\7\1\u02ee\17\7\1\0\1\7"+
    "\31\0\5\7\1\u02ef\2\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\4\7\1\u02f0\3\7\1\0\1\7"+
    "\2\0\27\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\12\7\1\u02f1\14\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\4\7\1\u02f2\22\7\1\0\1\7"+
    "\31\0\4\7\1\u02f3\3\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\5\7"+
    "\1\u02f4\21\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\u02f5\24\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\1\7\1\u02f6\3\7\1\u02f7\21\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\1\7"+
    "\1\u02f8\25\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\u02f9\24\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\12\7\1\u02fa\14\7\1\0\1\7"+
    "\31\0\4\7\1\u02fb\3\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\5\7"+
    "\1\u02fc\21\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\5\7\1\u02fd\21\7\1\0\1\7\31\0\4\7"+
    "\1\u02fe\3\7\1\0\1\7\2\0\27\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\4\7\1\u02ff\22\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\13\7"+
    "\1\u0300\13\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\4\7\1\u0301\22\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\4\7\1\u0302\22\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\6\7\1\u0303\20\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u0304\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\13\7\1\u0305\13\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\1\7\1\u0306\25\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\4\7\1\u0307\22\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\12\7"+
    "\1\u0308\14\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\12\7\1\u0309\14\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\4\7\1\u030a\22\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\2\7\1\u030b\24\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\12\7"+
    "\1\u030c\14\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\7\7\1\u030d\17\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\4\7\1\u030e\22\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\10\7\1\u030f\2\7"+
    "\1\u0310\13\7\1\0\1\7\31\0\6\7\1\u0311\1\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\1\u0312\26\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\15\7\1\u0313\11\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\7\7\1\u0314"+
    "\17\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\1\7\1\u0315\10\7\1\u0316\2\7\1\u0317\11\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\17\7\1\u0318"+
    "\7\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\7\7\1\u0319\17\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\23\7\1\u031a\3\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\6\7\1\u031b\20\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\2\7\1\u031c"+
    "\24\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\2\7\1\u031d\24\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\11\7\1\u031e\15\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\4\7\1\u031f\22\7\1\0"+
    "\1\7\31\0\6\7\1\u0320\1\7\1\0\1\7\2\0"+
    "\27\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\12\7\1\u0321\14\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\20\7\1\u0322\6\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\2\7\1\u0323\24\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\17\7\1\u0324"+
    "\7\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\5\7\1\u0325\21\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\1\u0326\26\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\1\u0327\26\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\5\7\1\u0328\21\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\7\7\1\u0329"+
    "\17\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\4\7\1\u032a\22\7\1\0\1\7\31\0\4\7\1\u032b"+
    "\3\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\4\7\1\u032c\22\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\13\7\1\u032d"+
    "\13\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\1\u032e\26\7\1\0\1\7\31\0\4\7\1\u032f\3\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\4\7"+
    "\1\u0330\3\7\1\0\1\7\2\0\27\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\10\7\1\u0331\16\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\1\u0332"+
    "\26\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\13\7\1\u0333\13\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\22\7\1\u0334\4\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\1\u0335\26\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\4\7\1\u0336\22\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u0337\22\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\4\7\1\u0338\22\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\12\7\1\u0339\14\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\13\7\1\u033a\13\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\15\7"+
    "\1\u033b\11\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\10\7\1\u033c\16\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u033d\24\7\1\0\1\7"+
    "\31\0\6\7\1\u033e\1\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u033f\22\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\10\7\1\u0340\16\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\16\7\1\u0341\10\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\10\7\1\u0342\16\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u0343\22\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\u0344\24\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\1\u0345\26\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\1\u0346\26\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\23\7\1\u0347\3\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u0348\22\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\10\7\1\u0349\16\7\1\0\1\7\31\0\4\7"+
    "\1\u034a\3\7\1\0\1\7\2\0\27\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\5\7\1\u034b\21\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\1\u034c"+
    "\26\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\4\7\1\u034d\22\7\1\0\1\7\31\0\6\7\1\u034e"+
    "\1\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\5\7\1\u034f\21\7\1\0"+
    "\1\7\31\0\4\7\1\u0350\3\7\1\0\1\7\2\0"+
    "\27\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\3\7\1\u0351\23\7\1\0\1\7\31\0\6\7\1\u0352"+
    "\1\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\13\7\1\u0353\13\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\1\u0354\26\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\12\7"+
    "\1\u0355\14\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\12\7\1\u0356\14\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\10\7\1\u0357\16\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\2\7\1\u0358\24\7"+
    "\1\0\1\7\31\0\4\7\1\u0359\3\7\1\0\1\7"+
    "\2\0\27\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\10\7\1\u035a\16\7\1\0\1\7\31\0\4\7"+
    "\1\u035b\3\7\1\0\1\7\2\0\27\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\1\7\1\u035c\25\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u035d\22\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\12\7\1\u035e\14\7\1\0\1\7\31\0\5\7"+
    "\1\u035f\2\7\1\0\1\7\2\0\27\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\11\7\1\u0360\15\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u0361\22\7\1\0\1\7\31\0\6\7\1\u0362\1\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\21\7\1\u0363\5\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\2\7\1\u0364\24\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\13\7"+
    "\1\u0365\13\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\13\7\1\u0366\13\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\4\7\1\u0367\22\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\5\7\1\u0368\21\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u0369\24\7\1\0\1\7\31\0\4\7\1\u036a\3\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\5\7"+
    "\1\u036b\2\7\1\0\1\7\2\0\27\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\1\u036c\26\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\4\7\1\u036d"+
    "\22\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\2\7\1\u036e\24\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\10\7\1\u036f\16\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\2\7\1\u0370\24\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\7\7\1\u0371"+
    "\17\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\2\7\1\u0372\24\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\2\7\1\u0373\24\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\4\7\1\u0374\22\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\1\u0375\26\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\5\7"+
    "\1\u0376\21\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\4\7\1\u0377\22\7\1\0\1\7\31\0\4\7"+
    "\1\u0378\3\7\1\0\1\7\2\0\27\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\12\7\1\u0379\14\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u037a\22\7\1\0\1\7\31\0\2\7\1\u037b\5\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\16\7\1\u037c\10\7\1\0\1\7"+
    "\31\0\2\7\1\u037d\5\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\21\7"+
    "\1\u037e\5\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\1\u037f\26\7\1\0\1\7\31\0\4\7\1\u0380"+
    "\3\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\7\7\1\u0381\17\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\10\7\1\u0382"+
    "\16\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\2\7\1\u0383\24\7\1\0\1\7\31\0\4\7\1\u0384"+
    "\3\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\7\7\1\u0385\17\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\7\7\1\u0386"+
    "\17\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\3\7\1\u0387\23\7\1\0\1\7\31\0\4\7\1\u0388"+
    "\3\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\1\7\1\u0389\25\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\10\7\1\u038a"+
    "\16\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\15\7\1\u038b\11\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\7\7\1\u038c\17\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\5\7\1\u038d\21\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\2\7\1\u038e"+
    "\24\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\27\7\1\u038f\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\5\7\1\u0390\21\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\17\7\1\u0391\7\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\1\u0392\26\7\1\0\1\7"+
    "\31\0\6\7\1\u0393\1\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u0394\22\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\5\7\1\u0395\21\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u0396\24\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\2\7\1\u0397\24\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\23\7"+
    "\1\u0398\3\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\u0399\24\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u039a\24\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\1\u039b\26\7\1\0"+
    "\1\7\31\0\5\7\1\u039c\2\7\1\0\1\7\2\0"+
    "\27\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\4\7\1\u039d\22\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\12\7\1\u039e\14\7\1\0\1\7\31\0"+
    "\6\7\1\u039f\1\7\1\0\1\7\2\0\27\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\15\7\1\u03a0"+
    "\11\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\2\7\1\u03a1\24\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\2\7\1\u03a2\24\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\4\7\1\u03a3\22\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\24\7\1\u03a4"+
    "\2\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\5\7\1\u03a5\21\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\7\7\1\u03a6\17\7\1\0\1\7\31\0"+
    "\6\7\1\u03a7\1\7\1\0\1\7\2\0\27\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\4\7\1\u03a8"+
    "\22\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\11\7\1\u03a9\15\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\4\7\1\u03aa\22\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\17\7\1\u03ab\7\7\1\0"+
    "\1\7\31\0\6\7\1\u03ac\1\7\1\0\1\7\2\0"+
    "\27\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\4\7\1\u03ad\22\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\10\7\1\u03ae\16\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\22\7\1\u03af\4\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\4\7\1\u03b0"+
    "\22\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\10\7\1\u03b1\16\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\7\7\1\u03b2\17\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\5\7\1\u03b3\21\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\1\u03b4\26\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\13\7"+
    "\1\u03b5\13\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\5\7\1\u03b6\21\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\4\7\1\u03b7\22\7\1\0\1\7"+
    "\31\0\2\7\1\u03b8\5\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u03b9\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\13\7\1\u03ba\13\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u03bb\24\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\12\7\1\u03bc\14\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u03bd\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\12\7\1\u03be\14\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\10\7\1\u03bf\16\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\11\7\1\u03c0\15\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u03c1\22\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\11\7\1\u03c2\15\7\1\0\1\7\31\0\2\7"+
    "\1\u03c3\5\7\1\0\1\7\2\0\27\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\10\7\1\u03c4\16\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\12\7"+
    "\1\u03c5\14\7\1\0\1\7\31\0\6\7\1\u03c6\1\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\12\7\1\u03c7\14\7\1\0\1\7"+
    "\31\0\5\7\1\u03c8\2\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\4\7\1\u03c9\3\7\1\0\1\7"+
    "\2\0\27\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\4\7\1\u03ca\22\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\4\7\1\u03cb\22\7\1\0\1\7"+
    "\31\0\4\7\1\u03cc\3\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\22\7"+
    "\1\u03cd\4\7\1\0\1\7\31\0\4\7\1\u03ce\3\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\5\7\1\u03cf\21\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\4\7\1\u03d0\22\7"+
    "\1\0\1\7\31\0\2\7\1\u03d1\5\7\1\0\1\7"+
    "\2\0\27\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\4\7\1\u03d2\22\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u03d3\24\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\21\7\1\u03d4\5\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\3\7"+
    "\1\u03d5\23\7\1\0\1\7\64\0\1\u03d6\42\0\10\7"+
    "\1\0\1\7\2\0\5\7\1\u03d7\21\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\2\7\1\u03d8\24\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\1\7"+
    "\1\u03d9\25\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\3\7\1\u03da\23\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\1\u03db\26\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\7\7\1\u03dc\17\7\1\0"+
    "\1\u03dd\31\0\10\7\1\0\1\7\2\0\4\7\1\u03de"+
    "\22\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\4\7\1\u03df\22\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\7\7\1\u03e0\17\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\6\7\1\u03e1\20\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\12\7\1\u03e2"+
    "\14\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\2\7\1\u03e3\24\7\1\0\1\7\31\0\4\7\1\u03e4"+
    "\3\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\5\7\1\u03e5\21\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\11\7\1\u03e6"+
    "\15\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\12\7\1\u03e7\14\7\1\0\1\7\31\0\5\7\1\u03e8"+
    "\2\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\2\7\1\u03e9\24\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\2\7\1\u03ea"+
    "\24\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\7\7\1\u03eb\17\7\1\0\1\7\31\0\4\7\1\u03ec"+
    "\3\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\2\7\1\u03ed\24\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\13\7\1\u03ee"+
    "\13\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\2\7\1\u03ef\24\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\11\7\1\u03f0\15\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\12\7\1\u03f1\14\7\1\0"+
    "\1\7\31\0\5\7\1\u03f2\2\7\1\0\1\7\2\0"+
    "\1\7\1\u03f3\2\7\1\u03f4\22\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\1\7\1\u03f5\25\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\4\7\1\u03f6"+
    "\22\7\1\0\1\7\31\0\4\7\1\u03f7\3\7\1\0"+
    "\1\7\2\0\27\7\1\0\1\7\31\0\4\7\1\u03f8"+
    "\3\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\4\7\1\u03f9\22\7\1\0"+
    "\1\7\31\0\2\7\1\u03fa\5\7\1\0\1\7\2\0"+
    "\10\7\1\u03fb\16\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\2\7\1\u03fc\24\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\1\u03fd\26\7\1\0\1\7"+
    "\31\0\5\7\1\u03fe\2\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\13\7"+
    "\1\u03ff\6\7\1\u0400\4\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\10\7\1\u0401\16\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\7\7\1\u0402\17\7"+
    "\1\0\1\7\31\0\4\7\1\u0403\3\7\1\0\1\7"+
    "\2\0\27\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\13\7\1\u0404\13\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u0405\24\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\2\7\1\u0406\24\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\21\7"+
    "\1\u0407\5\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\4\7\1\u0408\22\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\7\7\1\u0409\17\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\7\7\1\u040a\17\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u040b\22\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\4\7\1\u040c\22\7\1\0\1\7\52\0\1\u040d"+
    "\54\0\10\7\1\0\1\7\2\0\11\7\1\u040e\15\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\5\7"+
    "\1\u040f\21\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\4\7\1\u0410\22\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\4\7\1\u0411\22\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\20\7\1\u0412\6\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u0413\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\u0414\24\7\1\0\1\7\31\0\4\7"+
    "\1\u0415\3\7\1\0\1\7\2\0\27\7\1\0\1\7"+
    "\31\0\6\7\1\u0416\1\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\7\7"+
    "\1\u0417\17\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\5\7\1\u0418\21\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\12\7\1\u0419\14\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\7\7\1\u041a\17\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\5\7"+
    "\1\u041b\21\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\13\7\1\u041c\13\7\1\0\1\7\31\0\6\7"+
    "\1\u041d\1\7\1\0\1\7\2\0\27\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\7\7\1\u041e\17\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u041f\22\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\10\7\1\u0420\16\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\13\7\1\u0421\13\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\1\u0422\26\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\12\7\1\u0423"+
    "\14\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\1\u0424\26\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\4\7\1\u0425\22\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\4\7\1\u0426\22\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\12\7\1\u0427\14\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\7\7"+
    "\1\u0428\17\7\1\0\1\7\31\0\5\7\1\u0429\2\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\13\7\1\u042a\13\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\12\7\1\u042b\14\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u042c\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\13\7\1\u042d\13\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\10\7\1\u042e\16\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\1\7\1\u042f\25\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u0430\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\4\7\1\u0431\22\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\11\7\1\u0432\15\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\1\u0433\26\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\1\u0434\26\7"+
    "\1\0\1\7\31\0\4\7\1\u0435\3\7\1\0\1\7"+
    "\2\0\27\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\5\7\1\u0436\21\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\14\7\1\u0437\12\7\1\0\1\7"+
    "\54\0\1\u0438\52\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u0439\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\12\7\1\u043a\14\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\20\7\1\u043b\6\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\1\7\1\u043c\25\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u043d\24\7\1\0\1\7\31\0\4\7\1\u043e\3\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\4\7\1\u043f\22\7\1\0\1\7"+
    "\31\0\4\7\1\u0440\3\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\4\7\1\u0441\3\7\1\0\1\7"+
    "\2\0\27\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\u0442\24\7\1\0\1\7\31\0\5\7"+
    "\1\u0443\2\7\1\0\1\7\2\0\27\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\2\7\1\u0444\24\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u0445\22\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\15\7\1\u0446\11\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\16\7\1\u0447\10\7\1\0\1\7"+
    "\31\0\4\7\1\u0448\3\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\6\7\1\u0449\1\7\1\0\1\7"+
    "\2\0\27\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\1\7\1\u044a\25\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u044b\24\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\15\7\1\u044c\11\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\11\7"+
    "\1\u044d\15\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\22\7\1\u044e\4\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\12\7\1\u044f\14\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\5\7\1\u0450\21\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\12\7"+
    "\1\u0451\14\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\5\7\1\u0452\21\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\16\7\1\u0453\10\7\1\0\1\7"+
    "\31\0\6\7\1\u0454\1\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\36\0\1\u0455\70\0\10\7\1\0\1\7"+
    "\2\0\1\7\1\u0456\25\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\7\7\1\u0457\17\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\13\7\1\u0458\13\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\17\7"+
    "\1\u0459\7\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\5\7\1\u045a\21\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\5\7\1\u045b\21\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\2\7\1\u045c\24\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u045d\24\7\1\0\1\7\31\0\6\7\1\u045e\1\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\13\7\1\u045f\13\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\12\7\1\u0460\14\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\5\7"+
    "\1\u0461\21\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\12\7\1\u0462\14\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\6\7\1\u0463\20\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\13\7\1\u0464\13\7"+
    "\1\0\1\7\31\0\4\7\1\u0465\3\7\1\0\1\7"+
    "\2\0\27\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\15\7\1\u0466\11\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\1\7\1\u0467\25\7\1\0\1\7"+
    "\31\0\6\7\1\u0468\1\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\11\7"+
    "\1\u0469\15\7\1\0\1\7\53\0\1\u046a\53\0\4\7"+
    "\1\u046b\3\7\1\0\1\7\2\0\27\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\2\7\1\u046c\24\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\10\7"+
    "\1\u046d\16\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\13\7\1\u046e\13\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u046f\24\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\2\7\1\u0470\24\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u0471\22\7\1\0\1\7\31\0\6\7\1\u0472\1\7"+
    "\1\0\1\7\2\0\27\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\14\7\1\u0473\12\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\17\7\1\u0474\7\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u0475\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\u0476\24\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\4\7\1\u0477\22\7\1\0\1\7"+
    "\31\0\10\7\1\0\1\7\2\0\2\7\1\u0478\24\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u0479\22\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\5\7\1\u047a\21\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\1\u047b\26\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\5\7\1\u047c\21\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\1\u047d\26\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\4\7"+
    "\1\u047e\22\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\5\7\1\u047f\21\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\1\u0480\26\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\15\7\1\u0481\11\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\12\7\1\u0482"+
    "\14\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\13\7\1\u0483\13\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\6\7\1\u0484\20\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\4\7\1\u0485\22\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\2\7\1\u0486"+
    "\24\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\11\7\1\u0487\15\7\1\0\1\7\31\0\10\7\1\0"+
    "\1\7\2\0\4\7\1\u0488\22\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\1\7\1\u0489\2\7\1\u048a"+
    "\22\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\1\u048b\26\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\2\7\1\u048c\24\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\1\u048d\26\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\16\7\1\u048e\10\7\1\0"+
    "\1\7\31\0\10\7\1\0\1\7\2\0\4\7\1\u048f"+
    "\22\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\16\7\1\u0490\10\7\1\0\1\7\31\0\6\7\1\u0491"+
    "\1\7\1\0\1\7\2\0\27\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\1\u0492\26\7\1\0\1\7"+
    "\31\0\6\7\1\u0493\1\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\2\7"+
    "\1\u0494\24\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\12\7\1\u0495\14\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\2\7\1\u0496\24\7\1\0\1\7"+
    "\31\0\6\7\1\u0497\1\7\1\0\1\7\2\0\27\7"+
    "\1\0\1\7\31\0\10\7\1\0\1\7\2\0\13\7"+
    "\1\u0498\13\7\1\0\1\7\31\0\10\7\1\0\1\7"+
    "\2\0\4\7\1\u0499\22\7\1\0\1\7\31\0\10\7"+
    "\1\0\1\7\2\0\1\u049a\26\7\1\0\1\7\31\0"+
    "\10\7\1\0\1\7\2\0\16\7\1\u049b\10\7\1\0"+
    "\1\7\31\0\6\7\1\u049c\1\7\1\0\1\7\2\0"+
    "\27\7\1\0\1\7\31\0\10\7\1\0\1\7\2\0"+
    "\2\7\1\u049d\24\7\1\0\1\7\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[58094];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\10\1\2\11\24\1\3\11"+
    "\1\1\1\11\1\1\1\11\1\1\2\11\7\1\1\0"+
    "\17\1\2\11\144\1\12\11\1\0\1\1\1\11\1\0"+
    "\247\1\1\0\u022e\1\1\0\106\1\1\0\66\1\1\0"+
    "\52\1\1\0\34\1\1\0\24\1\1\11\63\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1181];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;
    public int lin;
    public int col;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2870) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return ERROR;
            } 
            // fall through
          case 297: break;
          case 2: 
            { /* skip */
            } 
            // fall through
          case 298: break;
          case 3: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Div;
            } 
            // fall through
          case 299: break;
          case 4: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Mul;
            } 
            // fall through
          case 300: break;
          case 5: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Resta;
            } 
            // fall through
          case 301: break;
          case 6: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Identificador;
            } 
            // fall through
          case 302: break;
          case 7: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return IdentificadorError;
            } 
            // fall through
          case 303: break;
          case 8: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Bit;
            } 
            // fall through
          case 304: break;
          case 9: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Integer;
            } 
            // fall through
          case 305: break;
          case 10: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Punto;
            } 
            // fall through
          case 306: break;
          case 11: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Suma;
            } 
            // fall through
          case 307: break;
          case 12: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return VarcharError;
            } 
            // fall through
          case 308: break;
          case 13: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Porce;
            } 
            // fall through
          case 309: break;
          case 14: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return PuntoYComa;
            } 
            // fall through
          case 310: break;
          case 15: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Coma;
            } 
            // fall through
          case 311: break;
          case 16: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Acorchete;
            } 
            // fall through
          case 312: break;
          case 17: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Ccorchete;
            } 
            // fall through
          case 313: break;
          case 18: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Aparentesis;
            } 
            // fall through
          case 314: break;
          case 19: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Cparentesis;
            } 
            // fall through
          case 315: break;
          case 20: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Allave;
            } 
            // fall through
          case 316: break;
          case 21: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Cllave;
            } 
            // fall through
          case 317: break;
          case 22: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Arroba;
            } 
            // fall through
          case 318: break;
          case 23: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Hashtag;
            } 
            // fall through
          case 319: break;
          case 24: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Menor;
            } 
            // fall through
          case 320: break;
          case 25: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Igual;
            } 
            // fall through
          case 321: break;
          case 26: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Mayor;
            } 
            // fall through
          case 322: break;
          case 27: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Exclamacion;
            } 
            // fall through
          case 323: break;
          case 28: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Comentario;
            } 
            // fall through
          case 324: break;
          case 29: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Float;
            } 
            // fall through
          case 325: break;
          case 30: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Varchar;
            } 
            // fall through
          case 326: break;
          case 31: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return AS;
            } 
            // fall through
          case 327: break;
          case 32: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return TO;
            } 
            // fall through
          case 328: break;
          case 33: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return TB;
            } 
            // fall through
          case 329: break;
          case 34: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return ON;
            } 
            // fall through
          case 330: break;
          case 35: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return OR;
            } 
            // fall through
          case 331: break;
          case 36: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return OF;
            } 
            // fall through
          case 332: break;
          case 37: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return IN;
            } 
            // fall through
          case 333: break;
          case 38: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return IS;
            } 
            // fall through
          case 334: break;
          case 39: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return IF;
            } 
            // fall through
          case 335: break;
          case 40: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return MB;
            } 
            // fall through
          case 336: break;
          case 41: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return BY;
            } 
            // fall through
          case 337: break;
          case 42: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return GO;
            } 
            // fall through
          case 338: break;
          case 43: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return GB;
            } 
            // fall through
          case 339: break;
          case 44: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return KB;
            } 
            // fall through
          case 340: break;
          case 45: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Dcorchete;
            } 
            // fall through
          case 341: break;
          case 46: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Dparentesis;
            } 
            // fall through
          case 342: break;
          case 47: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Dllaves;
            } 
            // fall through
          case 343: break;
          case 48: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Dhashtag;
            } 
            // fall through
          case 344: break;
          case 49: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return MenorIgual;
            } 
            // fall through
          case 345: break;
          case 50: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Digual;
            } 
            // fall through
          case 346: break;
          case 51: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return MayorIgual;
            } 
            // fall through
          case 347: break;
          case 52: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Diferente;
            } 
            // fall through
          case 348: break;
          case 53: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Dampersand;
            } 
            // fall through
          case 349: break;
          case 54: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return Dbarra;
            } 
            // fall through
          case 350: break;
          case 55: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return NOT;
            } 
            // fall through
          case 351: break;
          case 56: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return USE;
            } 
            // fall through
          case 352: break;
          case 57: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return AND;
            } 
            // fall through
          case 353: break;
          case 58: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return ANY;
            } 
            // fall through
          case 354: break;
          case 59: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return ALL;
            } 
            // fall through
          case 355: break;
          case 60: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return ADD;
            } 
            // fall through
          case 356: break;
          case 61: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return ASC;
            } 
            // fall through
          case 357: break;
          case 62: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return AVG;
            } 
            // fall through
          case 358: break;
          case 63: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return END;
            } 
            // fall through
          case 359: break;
          case 64: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return TOP;
            } 
            // fall through
          case 360: break;
          case 65: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return OUT;
            } 
            // fall through
          case 361: break;
          case 66: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return OFF;
            } 
            // fall through
          case 362: break;
          case 67: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return INT;
            } 
            // fall through
          case 363: break;
          case 68: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SUM;
            } 
            // fall through
          case 364: break;
          case 69: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SET;
            } 
            // fall through
          case 365: break;
          case 70: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return MAX;
            } 
            // fall through
          case 366: break;
          case 71: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return MIN;
            } 
            // fall through
          case 367: break;
          case 72: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return BIT;
            } 
            // fall through
          case 368: break;
          case 73: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return FOR;
            } 
            // fall through
          case 369: break;
          case 74: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return KEY;
            } 
            // fall through
          case 370: break;
          case 75: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return NULL;
            } 
            // fall through
          case 371: break;
          case 76: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return NAME;
            } 
            // fall through
          case 372: break;
          case 77: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return USER;
            } 
            // fall through
          case 373: break;
          case 78: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return LEFT;
            } 
            // fall through
          case 374: break;
          case 79: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return LOAD;
            } 
            // fall through
          case 375: break;
          case 80: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return LIKE;
            } 
            // fall through
          case 376: break;
          case 81: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DUMP;
            } 
            // fall through
          case 377: break;
          case 82: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DATE;
            } 
            // fall through
          case 378: break;
          case 83: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DENY;
            } 
            // fall through
          case 379: break;
          case 84: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DESC;
            } 
            // fall through
          case 380: break;
          case 85: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DROP;
            } 
            // fall through
          case 381: break;
          case 86: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DISK;
            } 
            // fall through
          case 382: break;
          case 87: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DBCC;
            } 
            // fall through
          case 383: break;
          case 88: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return ELSE;
            } 
            // fall through
          case 384: break;
          case 89: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return EXEC;
            } 
            // fall through
          case 385: break;
          case 90: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return EXIT;
            } 
            // fall through
          case 386: break;
          case 91: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return TEXT;
            } 
            // fall through
          case 387: break;
          case 92: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return TRAN;
            } 
            // fall through
          case 388: break;
          case 93: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return TIME;
            } 
            // fall through
          case 389: break;
          case 94: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return THEN;
            } 
            // fall through
          case 390: break;
          case 95: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return RULE;
            } 
            // fall through
          case 391: break;
          case 96: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return REAL;
            } 
            // fall through
          case 392: break;
          case 97: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return READ;
            } 
            // fall through
          case 393: break;
          case 98: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return PLAN;
            } 
            // fall through
          case 394: break;
          case 99: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return PROC;
            } 
            // fall through
          case 395: break;
          case 100: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return OPEN;
            } 
            // fall through
          case 396: break;
          case 101: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return OVER;
            } 
            // fall through
          case 397: break;
          case 102: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CASE;
            } 
            // fall through
          case 398: break;
          case 103: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CHAR;
            } 
            // fall through
          case 399: break;
          case 104: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return INTO;
            } 
            // fall through
          case 400: break;
          case 105: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SAVE;
            } 
            // fall through
          case 401: break;
          case 106: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SELF;
            } 
            // fall through
          case 402: break;
          case 107: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SOME;
            } 
            // fall through
          case 403: break;
          case 108: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SIZE;
            } 
            // fall through
          case 404: break;
          case 109: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return MARK;
            } 
            // fall through
          case 405: break;
          case 110: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return BULK;
            } 
            // fall through
          case 406: break;
          case 111: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return GOTO;
            } 
            // fall through
          case 407: break;
          case 112: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return FULL;
            } 
            // fall through
          case 408: break;
          case 113: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return FROM;
            } 
            // fall through
          case 409: break;
          case 114: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return FILE;
            } 
            // fall through
          case 410: break;
          case 115: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return WITH;
            } 
            // fall through
          case 411: break;
          case 116: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return WHEN;
            } 
            // fall through
          case 412: break;
          case 117: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return KILL;
            } 
            // fall through
          case 413: break;
          case 118: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return VIEW;
            } 
            // fall through
          case 414: break;
          case 119: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return JOIN;
            } 
            // fall through
          case 415: break;
          case 120: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return NAMES;
            } 
            // fall through
          case 416: break;
          case 121: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return NTEXT;
            } 
            // fall through
          case 417: break;
          case 122: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return NCHAR;
            } 
            // fall through
          case 418: break;
          case 123: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return UNION;
            } 
            // fall through
          case 419: break;
          case 124: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return LOCAL;
            } 
            // fall through
          case 420: break;
          case 125: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return ALTER;
            } 
            // fall through
          case 421: break;
          case 126: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return TABLE;
            } 
            // fall through
          case 422: break;
          case 127: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return RIGHT;
            } 
            // fall through
          case 423: break;
          case 128: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return PRINT;
            } 
            // fall through
          case 424: break;
          case 129: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return PIVOT;
            } 
            // fall through
          case 425: break;
          case 130: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return OUTER;
            } 
            // fall through
          case 426: break;
          case 131: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return ORDER;
            } 
            // fall through
          case 427: break;
          case 132: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return OWNER;
            } 
            // fall through
          case 428: break;
          case 133: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CLOSE;
            } 
            // fall through
          case 429: break;
          case 134: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CROSS;
            } 
            // fall through
          case 430: break;
          case 135: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return COUNT;
            } 
            // fall through
          case 431: break;
          case 136: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CHECK;
            } 
            // fall through
          case 432: break;
          case 137: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return INNER;
            } 
            // fall through
          case 433: break;
          case 138: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return INDEX;
            } 
            // fall through
          case 434: break;
          case 139: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return INPUT;
            } 
            // fall through
          case 435: break;
          case 140: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return IMAGE;
            } 
            // fall through
          case 436: break;
          case 141: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return MERGE;
            } 
            // fall through
          case 437: break;
          case 142: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return MONEY;
            } 
            // fall through
          case 438: break;
          case 143: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return BEGIN;
            } 
            // fall through
          case 439: break;
          case 144: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return BREAK;
            } 
            // fall through
          case 440: break;
          case 145: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return GRANT;
            } 
            // fall through
          case 441: break;
          case 146: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return GROUP;
            } 
            // fall through
          case 442: break;
          case 147: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return FLOAT;
            } 
            // fall through
          case 443: break;
          case 148: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return FETCH;
            } 
            // fall through
          case 444: break;
          case 149: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return WHERE;
            } 
            // fall through
          case 445: break;
          case 150: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return WHILE;
            } 
            // fall through
          case 446: break;
          case 151: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return NULLIF;
            } 
            // fall through
          case 447: break;
          case 152: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return UNIQUE;
            } 
            // fall through
          case 448: break;
          case 153: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return UPDATE;
            } 
            // fall through
          case 449: break;
          case 154: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return LINENO;
            } 
            // fall through
          case 450: break;
          case 155: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DELETE;
            } 
            // fall through
          case 451: break;
          case 156: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DOUBLE;
            } 
            // fall through
          case 452: break;
          case 157: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return EXCEPT;
            } 
            // fall through
          case 453: break;
          case 158: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return EXISTS;
            } 
            // fall through
          case 454: break;
          case 159: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return ERRLVL;
            } 
            // fall through
          case 455: break;
          case 160: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return ESCAPE;
            } 
            // fall through
          case 456: break;
          case 161: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return RETURN;
            } 
            // fall through
          case 457: break;
          case 162: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return REVERT;
            } 
            // fall through
          case 458: break;
          case 163: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return REVOKE;
            } 
            // fall through
          case 459: break;
          case 164: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return PUBLIC;
            } 
            // fall through
          case 460: break;
          case 165: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return OUTPUT;
            } 
            // fall through
          case 461: break;
          case 166: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return OPTION;
            } 
            // fall through
          case 462: break;
          case 167: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CURSOR;
            } 
            // fall through
          case 463: break;
          case 168: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CALLED;
            } 
            // fall through
          case 464: break;
          case 169: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CALLER;
            } 
            // fall through
          case 465: break;
          case 170: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CREATE;
            } 
            // fall through
          case 466: break;
          case 171: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return COLUMN;
            } 
            // fall through
          case 467: break;
          case 172: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return COMMIT;
            } 
            // fall through
          case 468: break;
          case 173: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return INLINE;
            } 
            // fall through
          case 469: break;
          case 174: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return INSERT;
            } 
            // fall through
          case 470: break;
          case 175: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SELECT;
            } 
            // fall through
          case 471: break;
          case 176: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return STATIC;
            } 
            // fall through
          case 472: break;
          case 177: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SCROLL;
            } 
            // fall through
          case 473: break;
          case 178: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SCHEMA;
            } 
            // fall through
          case 474: break;
          case 179: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return HAVING;
            } 
            // fall through
          case 475: break;
          case 180: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return BACKUP;
            } 
            // fall through
          case 476: break;
          case 181: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return BROWSE;
            } 
            // fall through
          case 477: break;
          case 182: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return BINARY;
            } 
            // fall through
          case 478: break;
          case 183: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return BIGINT;
            } 
            // fall through
          case 479: break;
          case 184: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return GLOBAL;
            } 
            // fall through
          case 480: break;
          case 185: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return KEYSET;
            } 
            // fall through
          case 481: break;
          case 186: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return VALUES;
            } 
            // fall through
          case 482: break;
          case 187: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return NUMERIC;
            } 
            // fall through
          case 483: break;
          case 188: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return NOCHECK;
            } 
            // fall through
          case 484: break;
          case 189: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return UNPIVOT;
            } 
            // fall through
          case 485: break;
          case 190: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DECLARE;
            } 
            // fall through
          case 486: break;
          case 191: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DECIMAL;
            } 
            // fall through
          case 487: break;
          case 192: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DEFAULT;
            } 
            // fall through
          case 488: break;
          case 193: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DYNAMIC;
            } 
            // fall through
          case 489: break;
          case 194: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return EXECUTE;
            } 
            // fall through
          case 490: break;
          case 195: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return TRIGGER;
            } 
            // fall through
          case 491: break;
          case 196: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return TINYINT;
            } 
            // fall through
          case 492: break;
          case 197: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return TSEQUAL;
            } 
            // fall through
          case 493: break;
          case 198: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return RETURNS;
            } 
            // fall through
          case 494: break;
          case 199: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return RESTORE;
            } 
            // fall through
          case 495: break;
          case 200: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return PERCENT;
            } 
            // fall through
          case 496: break;
          case 201: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return PRIMARY;
            } 
            // fall through
          case 497: break;
          case 202: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return OPENXML;
            } 
            // fall through
          case 498: break;
          case 203: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return OFFSETS;
            } 
            // fall through
          case 499: break;
          case 204: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CURRENT;
            } 
            // fall through
          case 500: break;
          case 205: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CASCADE;
            } 
            // fall through
          case 501: break;
          case 206: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CONVERT;
            } 
            // fall through
          case 502: break;
          case 207: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return COLLATE;
            } 
            // fall through
          case 503: break;
          case 208: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return COMPUTE;
            } 
            // fall through
          case 504: break;
          case 209: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return INCLUDE;
            } 
            // fall through
          case 505: break;
          case 210: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SETUSER;
            } 
            // fall through
          case 506: break;
          case 211: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return MAXSIZE;
            } 
            // fall through
          case 507: break;
          case 212: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return BETWEEN;
            } 
            // fall through
          case 508: break;
          case 213: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return FOREIGN;
            } 
            // fall through
          case 509: break;
          case 214: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return WAITFOR;
            } 
            // fall through
          case 510: break;
          case 215: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return VARCHAR;
            } 
            // fall through
          case 511: break;
          case 216: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return VARYING;
            } 
            // fall through
          case 512: break;
          case 217: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return NATIONAL;
            } 
            // fall through
          case 513: break;
          case 218: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return NVARCHAR;
            } 
            // fall through
          case 514: break;
          case 219: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DATABASE;
            } 
            // fall through
          case 515: break;
          case 220: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DATETIME;
            } 
            // fall through
          case 516: break;
          case 221: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DISTINCT;
            } 
            // fall through
          case 517: break;
          case 222: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return EXTERNAL;
            } 
            // fall through
          case 518: break;
          case 223: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return TEXTSIZE;
            } 
            // fall through
          case 519: break;
          case 224: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return TRUNCATE;
            } 
            // fall through
          case 520: break;
          case 225: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return READTEXT;
            } 
            // fall through
          case 521: break;
          case 226: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return READONLY;
            } 
            // fall through
          case 522: break;
          case 227: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return RESTRICT;
            } 
            // fall through
          case 523: break;
          case 228: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return ROLLBACK;
            } 
            // fall through
          case 524: break;
          case 229: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return ROWCOUNT;
            } 
            // fall through
          case 525: break;
          case 230: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CONTAINS;
            } 
            // fall through
          case 526: break;
          case 231: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CONTINUE;
            } 
            // fall through
          case 527: break;
          case 232: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return COALESCE;
            } 
            // fall through
          case 528: break;
          case 233: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return IDENTITY;
            } 
            // fall through
          case 529: break;
          case 234: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SHUTDOWN;
            } 
            // fall through
          case 530: break;
          case 235: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SMALLINT;
            } 
            // fall through
          case 531: break;
          case 236: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return HOLDLOCK;
            } 
            // fall through
          case 532: break;
          case 237: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return FUNCTION;
            } 
            // fall through
          case 533: break;
          case 238: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return FREETEXT;
            } 
            // fall through
          case 534: break;
          case 239: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return FILENAME;
            } 
            // fall through
          case 535: break;
          case 240: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return UNLIMITED;
            } 
            // fall through
          case 536: break;
          case 241: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DATETIME2;
            } 
            // fall through
          case 537: break;
          case 242: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return RAISERROR;
            } 
            // fall through
          case 538: break;
          case 243: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return READ_ONLY;
            } 
            // fall through
          case 539: break;
          case 244: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return RECOMPILE;
            } 
            // fall through
          case 540: break;
          case 245: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return PRECISION;
            } 
            // fall through
          case 541: break;
          case 246: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return PROCEDURE;
            } 
            // fall through
          case 542: break;
          case 247: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return OPENQUERY;
            } 
            // fall through
          case 543: break;
          case 248: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CLUSTERED;
            } 
            // fall through
          case 544: break;
          case 249: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return INTERSECT;
            } 
            // fall through
          case 545: break;
          case 250: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return IMMEDIATE;
            } 
            // fall through
          case 546: break;
          case 251: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return WRITETEXT;
            } 
            // fall through
          case 547: break;
          case 252: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return VARBINARY;
            } 
            // fall through
          case 548: break;
          case 253: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return UPDATETEXT;
            } 
            // fall through
          case 549: break;
          case 254: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DEALLOCATE;
            } 
            // fall through
          case 550: break;
          case 255: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return ENCRYPTION;
            } 
            // fall through
          case 551: break;
          case 256: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return REFERENCES;
            } 
            // fall through
          case 552: break;
          case 257: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return ROWGUIDCOL;
            } 
            // fall through
          case 553: break;
          case 258: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return OPENROWSET;
            } 
            // fall through
          case 554: break;
          case 259: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return OPTIMISTIC;
            } 
            // fall through
          case 555: break;
          case 260: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CONSTRAINT;
            } 
            // fall through
          case 556: break;
          case 261: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CHECKPOINT;
            } 
            // fall through
          case 557: break;
          case 262: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return STATISTICS;
            } 
            // fall through
          case 558: break;
          case 263: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SMALLMONEY;
            } 
            // fall through
          case 559: break;
          case 264: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return FILLFACTOR;
            } 
            // fall through
          case 560: break;
          case 265: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return FILEGROWTH;
            } 
            // fall through
          case 561: break;
          case 266: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DISTRIBUTED;
            } 
            // fall through
          case 562: break;
          case 267: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return TABLESAMPLE;
            } 
            // fall through
          case 563: break;
          case 268: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return TRANSACTION;
            } 
            // fall through
          case 564: break;
          case 269: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return TRY_CONVERT;
            } 
            // fall through
          case 565: break;
          case 270: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return REPLICATION;
            } 
            // fall through
          case 566: break;
          case 271: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return RECONFIGURE;
            } 
            // fall through
          case 567: break;
          case 272: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return IDENTITYCOL;
            } 
            // fall through
          case 568: break;
          case 273: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SYSTEM_USER;
            } 
            // fall through
          case 569: break;
          case 274: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return NONCLUSTERED;
            } 
            // fall through
          case 570: break;
          case 275: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return TYPEWARNING;
            } 
            // fall through
          case 571: break;
          case 276: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CURRENT_USER;
            } 
            // fall through
          case 572: break;
          case 277: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CURRENT_DATE;
            } 
            // fall through
          case 573: break;
          case 278: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CURRENT_TIME;
            } 
            // fall through
          case 574: break;
          case 279: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SESSION_USER;
            } 
            // fall through
          case 575: break;
          case 280: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SCROLLLOCKS;
            } 
            // fall through
          case 576: break;
          case 281: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return FASTFORWARD;
            } 
            // fall through
          case 577: break;
          case 282: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return FORWARDONLY;
            } 
            // fall through
          case 578: break;
          case 283: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return WITHINGROUP;
            } 
            // fall through
          case 579: break;
          case 284: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return AUTHORIZATION;
            } 
            // fall through
          case 580: break;
          case 285: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CONTAINSTABLE;
            } 
            // fall through
          case 581: break;
          case 286: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SECURITYAUDIT;
            } 
            // fall through
          case 582: break;
          case 287: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SCHEMABINDING;
            } 
            // fall through
          case 583: break;
          case 288: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SMALLDATETIME;
            } 
            // fall through
          case 584: break;
          case 289: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return FREETEXTTABLE;
            } 
            // fall through
          case 585: break;
          case 290: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return DATETIMEOFFSET;
            } 
            // fall through
          case 586: break;
          case 291: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return OPENDATASOURCE;
            } 
            // fall through
          case 587: break;
          case 292: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return IDENTITY_INSERT;
            } 
            // fall through
          case 588: break;
          case 293: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return CURRENT_TIMESTAMP;
            } 
            // fall through
          case 589: break;
          case 294: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SEMANTICKEYPHRASETABLE;
            } 
            // fall through
          case 590: break;
          case 295: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SEMANTICSIMILARITYTABLE;
            } 
            // fall through
          case 591: break;
          case 296: 
            { lin=yyline; col=yycolumn; lexeme=yytext(); return SEMANTICSIMILARITYDETAILSTABLE;
            } 
            // fall through
          case 592: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
