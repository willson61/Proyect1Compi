/* The following code was generated by JFlex 1.7.0 */

package Code;
import static Code.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/Sthephan/Documents/GitHub/Proyect1Compi/Proyecto1C/src/Code/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\64\1\3\1\1\16\10\4\0\1\47\1\52"+
    "\1\0\1\63\1\7\1\51\1\54\1\0\1\57\1\60\1\5\1\50"+
    "\1\51\1\6\1\12\1\4\1\11\11\11\1\0\1\51\1\52\1\53"+
    "\1\52\1\0\1\51\1\15\1\32\1\26\1\16\1\13\1\30\1\36"+
    "\1\31\1\33\1\45\1\40\1\23\1\41\1\22\1\25\1\24\1\46"+
    "\1\21\1\34\1\20\1\27\1\43\1\42\1\17\1\35\1\37\1\55"+
    "\1\0\1\56\1\0\1\44\1\0\1\15\1\32\1\26\1\16\1\13"+
    "\1\30\1\36\1\31\1\33\1\45\1\40\1\23\1\41\1\22\1\25"+
    "\1\24\1\46\1\21\1\34\1\20\1\27\1\43\1\42\1\17\1\35"+
    "\1\37\1\61\1\14\1\62\1\0\6\10\1\65\32\10\2\0\4\7"+
    "\4\0\1\7\2\0\1\10\7\0\1\7\4\0\1\7\5\0\27\7"+
    "\1\0\37\7\1\0\70\7\2\33\115\7\1\34\u0142\7\4\0\14\7"+
    "\16\0\5\7\7\0\1\7\1\0\1\7\21\0\160\10\5\7\1\0"+
    "\2\7\2\0\4\7\10\0\1\7\1\0\3\7\1\0\1\7\1\0"+
    "\24\7\1\0\123\7\1\0\213\7\1\0\5\10\2\0\236\7\11\0"+
    "\46\7\2\0\1\7\7\0\47\7\7\0\1\7\1\0\55\10\1\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\1\10\10\0\33\7\5\0"+
    "\3\7\15\0\5\10\6\0\1\7\4\0\13\10\5\0\53\7\37\10"+
    "\4\0\2\7\1\10\143\7\1\0\1\7\10\10\1\0\6\10\2\7"+
    "\2\10\1\0\4\10\2\7\12\10\3\7\2\0\1\7\17\0\1\10"+
    "\1\7\1\10\36\7\33\10\2\0\131\7\13\10\1\7\16\0\12\10"+
    "\41\7\11\10\2\7\4\0\1\7\5\0\26\7\4\10\1\7\11\10"+
    "\1\7\3\10\1\7\5\10\22\0\31\7\3\10\104\0\1\7\1\0"+
    "\13\7\67\0\33\10\1\0\4\10\66\7\3\10\1\7\22\10\1\7"+
    "\7\10\12\7\2\10\2\0\12\10\1\0\7\7\1\0\7\7\1\0"+
    "\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0"+
    "\1\7\3\0\4\7\2\0\1\10\1\7\7\10\2\0\2\10\2\0"+
    "\3\10\1\7\10\0\1\10\4\0\2\7\1\0\3\7\2\10\2\0"+
    "\12\10\4\7\7\0\1\7\5\0\3\10\1\0\6\7\4\0\2\7"+
    "\2\0\26\7\1\0\7\7\1\0\2\7\1\0\2\7\1\0\2\7"+
    "\2\0\1\10\1\0\5\10\4\0\2\10\2\0\3\10\3\0\1\10"+
    "\7\0\4\7\1\0\1\7\7\0\14\10\3\7\1\10\13\0\3\10"+
    "\1\0\11\7\1\0\3\7\1\0\26\7\1\0\7\7\1\0\2\7"+
    "\1\0\5\7\2\0\1\10\1\7\10\10\1\0\3\10\1\0\3\10"+
    "\2\0\1\7\17\0\2\7\2\10\2\0\12\10\1\0\1\7\17\0"+
    "\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0"+
    "\2\7\1\0\5\7\2\0\1\10\1\7\7\10\2\0\2\10\2\0"+
    "\3\10\10\0\2\10\4\0\2\7\1\0\3\7\2\10\2\0\12\10"+
    "\1\0\1\7\20\0\1\10\1\7\1\0\6\7\3\0\3\7\1\0"+
    "\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0"+
    "\3\7\3\0\14\7\4\0\5\10\3\0\3\10\1\0\4\10\2\0"+
    "\1\7\6\0\1\10\16\0\12\10\11\0\1\7\7\0\3\10\1\0"+
    "\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7\3\0"+
    "\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10\1\0\2\7"+
    "\6\0\2\7\2\10\2\0\12\10\22\0\2\10\1\0\10\7\1\0"+
    "\3\7\1\0\27\7\1\0\12\7\1\0\5\7\2\0\1\10\1\7"+
    "\7\10\1\0\3\10\1\0\4\10\7\0\2\10\7\0\1\7\1\0"+
    "\2\7\2\10\2\0\12\10\1\0\2\7\17\0\2\10\1\0\10\7"+
    "\1\0\3\7\1\0\51\7\2\0\1\7\7\10\1\0\3\10\1\0"+
    "\4\10\1\7\10\0\1\10\10\0\2\7\2\10\2\0\12\10\12\0"+
    "\6\7\2\0\2\10\1\0\22\7\3\0\30\7\1\0\11\7\1\0"+
    "\1\7\2\0\7\7\3\0\1\10\4\0\6\10\1\0\1\10\1\0"+
    "\10\10\22\0\2\10\15\0\60\7\1\10\2\7\7\10\4\0\10\7"+
    "\10\10\1\0\12\10\47\0\2\7\1\0\1\7\2\0\2\7\1\0"+
    "\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0"+
    "\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\10\2\7\6\10"+
    "\1\0\2\10\1\7\2\0\5\7\1\0\1\7\1\0\6\10\2\0"+
    "\12\10\2\0\4\7\40\0\1\7\27\0\2\10\6\0\12\10\13\0"+
    "\1\10\1\0\1\10\1\0\1\10\4\0\2\10\10\7\1\0\44\7"+
    "\4\0\24\10\1\0\2\10\5\7\13\10\1\0\44\10\11\0\1\10"+
    "\71\0\53\7\24\10\1\7\12\10\6\0\6\7\4\10\4\7\3\10"+
    "\1\7\3\10\2\7\7\10\3\7\4\10\15\7\14\10\1\7\17\10"+
    "\2\0\46\7\1\0\1\7\5\0\1\7\2\0\53\7\1\0\u014d\7"+
    "\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\51\7"+
    "\1\0\4\7\2\0\41\7\1\0\4\7\2\0\7\7\1\0\1\7"+
    "\1\0\4\7\2\0\17\7\1\0\71\7\1\0\4\7\2\0\103\7"+
    "\2\0\3\10\40\0\20\7\20\0\125\7\14\0\u026c\7\2\0\21\7"+
    "\1\0\32\7\5\0\113\7\3\0\3\7\17\0\15\7\1\0\4\7"+
    "\3\10\13\0\22\7\3\10\13\0\22\7\2\10\14\0\15\7\1\0"+
    "\3\7\1\0\2\10\14\0\64\7\40\10\3\0\1\7\3\0\2\7"+
    "\1\10\2\0\12\10\41\0\3\10\2\0\12\10\6\0\130\7\10\0"+
    "\51\7\1\10\1\7\5\0\106\7\12\0\35\7\3\0\14\10\4\0"+
    "\14\10\12\0\12\10\36\7\2\0\5\7\13\0\54\7\4\0\21\10"+
    "\7\7\2\10\6\0\12\10\46\0\27\7\5\10\4\0\65\7\12\10"+
    "\1\0\35\10\2\0\13\10\6\0\12\10\15\0\1\7\130\0\5\10"+
    "\57\7\21\10\7\7\4\0\12\10\21\0\11\10\14\0\3\10\36\7"+
    "\15\10\2\7\12\10\54\7\16\10\14\0\44\7\24\10\10\0\12\10"+
    "\3\0\3\7\12\10\44\7\122\0\3\10\1\0\25\10\4\7\1\10"+
    "\4\7\3\10\2\7\11\0\300\7\47\10\25\0\4\10\u0116\7\2\0"+
    "\6\7\2\0\46\7\2\0\6\7\2\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\37\7\2\0\65\7\1\0\7\7\1\0"+
    "\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\4\0"+
    "\15\7\5\0\3\7\1\0\7\7\16\0\5\10\30\0\1\64\1\64"+
    "\5\10\20\0\2\7\23\0\1\7\13\0\5\10\5\0\6\10\1\0"+
    "\1\7\15\0\1\7\20\0\15\7\3\0\33\7\25\0\15\10\4\0"+
    "\1\10\3\0\14\10\21\0\1\7\4\0\1\7\2\0\12\7\1\0"+
    "\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\40\3\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0\1\7"+
    "\21\0\51\7\u0a77\0\57\7\1\0\57\7\1\0\205\7\6\0\4\7"+
    "\3\10\2\7\14\0\46\7\1\0\1\7\5\0\1\7\2\0\70\7"+
    "\7\0\1\7\17\0\1\10\27\7\11\0\7\7\1\0\7\7\1\0"+
    "\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0"+
    "\7\7\1\0\40\10\57\0\1\7\u01d5\0\3\7\31\0\11\7\6\10"+
    "\1\0\5\7\2\0\5\7\4\0\126\7\2\0\2\10\2\0\3\7"+
    "\1\0\132\7\1\0\4\7\5\0\51\7\3\0\136\7\21\0\33\7"+
    "\65\0\20\7\u0200\0\u19b6\7\112\0\u51cd\7\63\0\u048d\7\103\0\56\7"+
    "\2\0\u010d\7\3\0\20\7\12\10\2\7\24\0\57\7\1\10\4\0"+
    "\12\10\1\0\31\7\7\0\1\10\120\7\2\10\45\0\11\7\2\0"+
    "\147\7\2\0\4\7\1\0\4\7\14\0\13\7\115\0\12\7\1\10"+
    "\3\7\1\10\4\7\1\10\27\7\5\10\20\0\1\7\7\0\64\7"+
    "\14\0\2\10\62\7\21\10\13\0\12\10\6\0\22\10\6\7\3\0"+
    "\1\7\4\0\12\10\34\7\10\10\2\0\27\7\15\10\14\0\35\7"+
    "\3\0\4\10\57\7\16\10\16\0\1\7\12\10\46\0\51\7\16\10"+
    "\11\0\3\7\1\10\10\7\2\10\2\0\12\10\6\0\27\7\3\0"+
    "\1\7\1\10\4\0\60\7\1\10\1\7\3\10\2\7\2\10\5\7"+
    "\2\10\1\7\1\10\1\7\30\0\3\7\2\0\13\7\5\10\2\0"+
    "\3\7\2\10\12\0\6\7\2\0\6\7\2\0\6\7\11\0\7\7"+
    "\1\0\7\7\221\0\43\7\10\10\1\0\2\10\2\0\12\10\6\0"+
    "\u2ba4\7\14\0\27\7\4\0\61\7\u2104\0\u016e\7\2\0\152\7\46\0"+
    "\7\7\14\0\5\7\5\0\1\7\1\10\12\7\1\0\15\7\1\0"+
    "\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\154\7\41\0"+
    "\u016b\7\22\0\100\7\2\0\66\7\50\0\15\7\3\0\20\10\20\0"+
    "\7\10\14\0\2\7\30\0\3\7\31\0\1\7\6\0\5\7\1\0"+
    "\207\7\2\0\1\10\4\0\1\7\13\0\12\10\7\0\32\7\4\0"+
    "\1\7\1\0\32\7\13\0\131\7\3\0\6\7\2\0\6\7\2\0"+
    "\6\7\2\0\3\7\3\0\2\7\3\0\2\7\22\0\3\10\4\0"+
    "\14\7\1\0\32\7\1\0\23\7\1\0\2\7\1\0\17\7\2\0"+
    "\16\7\42\0\173\7\105\0\65\7\210\0\1\10\202\0\35\7\3\0"+
    "\61\7\57\0\37\7\21\0\33\7\65\0\36\7\2\0\44\7\4\0"+
    "\10\7\1\0\5\7\52\0\236\7\2\0\12\10\u0356\0\6\7\2\0"+
    "\1\7\1\0\54\7\1\0\2\7\3\0\1\7\2\0\27\7\252\0"+
    "\26\7\12\0\32\7\106\0\70\7\6\0\2\7\100\0\1\7\3\10"+
    "\1\0\2\10\5\0\4\10\4\7\1\0\3\7\1\0\33\7\4\0"+
    "\3\10\4\0\1\10\40\0\35\7\203\0\66\7\12\0\26\7\12\0"+
    "\23\7\215\0\111\7\u03b7\0\3\10\65\7\17\10\37\0\12\10\20\0"+
    "\3\10\55\7\13\10\2\0\1\10\22\0\31\7\7\0\12\10\6\0"+
    "\3\10\44\7\16\10\1\0\12\10\100\0\3\10\60\7\16\10\4\7"+
    "\13\0\12\10\u04a6\0\53\7\15\10\10\0\12\10\u0936\0\u036f\7\221\0"+
    "\143\7\u0b9d\0\u042f\7\u33d1\0\u0239\7\u04c7\0\105\7\13\0\1\7\56\10"+
    "\20\0\4\10\15\7\u4060\0\2\7\u2163\0\5\10\3\0\26\10\2\0"+
    "\7\10\36\0\4\10\224\0\3\10\u01bb\0\125\7\1\0\107\7\1\0"+
    "\2\7\2\0\1\7\2\0\2\7\2\0\4\7\1\0\14\7\1\0"+
    "\1\7\1\0\7\7\1\0\101\7\1\0\4\7\2\0\10\7\1\0"+
    "\7\7\1\0\34\7\1\0\4\7\1\0\5\7\1\0\1\7\3\0"+
    "\7\7\1\0\u0154\7\2\0\31\7\1\0\31\7\1\0\37\7\1\0"+
    "\31\7\1\0\37\7\1\0\31\7\1\0\37\7\1\0\31\7\1\0"+
    "\37\7\1\0\31\7\1\0\10\7\2\0\62\10\u1600\0\4\7\1\0"+
    "\33\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7\1\0"+
    "\4\7\1\0\1\7\1\0\1\7\6\0\1\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\1\7\2\0\4\7\1\0\7\7\1\0\4\7\1\0"+
    "\4\7\1\0\1\7\1\0\12\7\1\0\21\7\5\0\3\7\1\0"+
    "\5\7\1\0\21\7\u1144\0\ua6d7\7\51\0\u1035\7\13\0\336\7\u3fe2\0"+
    "\u021e\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\10\36\0\140\10\200\0\360\10\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\3\1\4\1\5\1\4\1\1"+
    "\25\4\1\3\1\1\4\3\1\0\1\6\1\5\1\0"+
    "\10\4\1\7\12\4\1\7\22\4\2\7\2\4\1\7"+
    "\26\4\1\7\23\4\2\0\2\6\1\0\1\5\62\4"+
    "\1\7\16\4\1\7\3\4\1\7\16\4\1\7\23\4"+
    "\1\0\1\6\1\7\16\4\1\7\4\4\1\7\16\4"+
    "\1\7\3\4\1\7\2\4\1\7\46\4\1\7\12\4"+
    "\1\7\35\4\1\7\74\4\1\7\7\4\1\0\5\4"+
    "\1\7\1\4\1\7\3\4\1\0\7\4\1\0\6\4"+
    "\1\0\5\4\1\0\1\7\2\4\1\7\23\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[486];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\66\0\330\0\u010e\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654"+
    "\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804"+
    "\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64"+
    "\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4"+
    "\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074"+
    "\0\u010e\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee"+
    "\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e"+
    "\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e"+
    "\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe"+
    "\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae"+
    "\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e"+
    "\0\u1a94\0\66\0\u1aca\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2"+
    "\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52"+
    "\0\u0a20\0\u1d88\0\u0c72\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96"+
    "\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046"+
    "\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6"+
    "\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6"+
    "\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556"+
    "\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0\0\u2706"+
    "\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814\0\u2556\0\u284a\0\u2880"+
    "\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\u29c4\0\u29fa\0\u2a30"+
    "\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\u2baa\0\u2be0"+
    "\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90"+
    "\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40"+
    "\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u1a28\0\u3084\0\u30ba"+
    "\0\u30f0\0\u3126\0\u315c\0\u3192\0\u31c8\0\u31fe\0\u3234\0\u326a"+
    "\0\u32a0\0\u32d6\0\u330c\0\u3342\0\u3378\0\u33ae\0\u33e4\0\u341a"+
    "\0\u3450\0\u3486\0\u34bc\0\u34f2\0\u3528\0\u355e\0\u3594\0\u35ca"+
    "\0\u3600\0\u3636\0\u366c\0\u36a2\0\u36d8\0\u370e\0\u3744\0\u377a"+
    "\0\u37b0\0\u37e6\0\u381c\0\u3852\0\u3888\0\u38be\0\u38f4\0\u392a"+
    "\0\u3960\0\u3996\0\u39cc\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada"+
    "\0\u3b10\0\u3b46\0\u3084\0\u3b7c\0\u3bb2\0\u3be8\0\u3c1e\0\u3c54"+
    "\0\u3c8a\0\u3cc0\0\u3cf6\0\u3d2c\0\u3d62\0\u3d98\0\u3dce\0\u3e04"+
    "\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc\0\u3f12\0\u3f48\0\u3f7e\0\u3fb4"+
    "\0\u3fea\0\u4020\0\u4056\0\u408c\0\u40c2\0\u40f8\0\u412e\0\u4164"+
    "\0\u419a\0\u41d0\0\u4206\0\u423c\0\u4272\0\u42a8\0\u42de\0\u4314"+
    "\0\u434a\0\u4380\0\u43b6\0\u43ec\0\u4422\0\u4458\0\u448e\0\u44c4"+
    "\0\u44fa\0\u4530\0\u4566\0\u459c\0\u45d2\0\u4608\0\u463e\0\u4674"+
    "\0\u46aa\0\u46e0\0\u4716\0\u474c\0\u4782\0\u47b8\0\u47ee\0\u4824"+
    "\0\u485a\0\u4890\0\u48c6\0\u48fc\0\u4932\0\u4968\0\u499e\0\u49d4"+
    "\0\u4a0a\0\u4a40\0\u4a76\0\u4aac\0\u4ae2\0\u4b18\0\u4b4e\0\u4b84"+
    "\0\u4bba\0\u4bf0\0\u4c26\0\u4c5c\0\u4c92\0\u4cc8\0\u4cfe\0\u4d34"+
    "\0\u34bc\0\u4d6a\0\u4da0\0\u4dd6\0\u4e0c\0\u4e42\0\u4e78\0\u4eae"+
    "\0\u4ee4\0\u4f1a\0\u4f50\0\u4f86\0\u4fbc\0\u4ff2\0\u5028\0\u505e"+
    "\0\u5094\0\u50ca\0\u5100\0\u5136\0\u516c\0\u51a2\0\u51d8\0\u520e"+
    "\0\u5244\0\u527a\0\u52b0\0\u52e6\0\u531c\0\u5352\0\u5388\0\u53be"+
    "\0\u53f4\0\u542a\0\u5460\0\u5496\0\u54cc\0\u5502\0\u5538\0\u556e"+
    "\0\u55a4\0\u55da\0\u5610\0\u5646\0\u567c\0\u56b2\0\u56e8\0\u571e"+
    "\0\u5754\0\u578a\0\u57c0\0\u57f6\0\u2c16\0\u582c\0\u5862\0\u5898"+
    "\0\u58ce\0\u5904\0\u593a\0\u5970\0\u59a6\0\u59dc\0\u5a12\0\u5a48"+
    "\0\u5a7e\0\u5ab4\0\u5aea\0\u5b20\0\u5b56\0\u5b8c\0\u5bc2\0\u5bf8"+
    "\0\u5c2e\0\u5c64\0\u5c9a\0\u5cd0\0\u5d06\0\u5d3c\0\u5d72\0\u5da8"+
    "\0\u5dde\0\u5e14\0\u5e4a\0\u5e80\0\u5eb6\0\u5eec\0\u5f22\0\u5f58"+
    "\0\u5f8e\0\u5fc4\0\66\0\u5ffa\0\u6030\0\u6066\0\u609c\0\u60d2"+
    "\0\u6108\0\u613e\0\u6174\0\u61aa\0\u61e0\0\u6216\0\u5970\0\u624c"+
    "\0\u6282\0\u62b8\0\u62ee\0\u6324\0\u635a\0\u6390";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[486];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\5\1\11\1\12\1\13\1\14\1\7\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\7\1\32\1\7\1\33\1\34"+
    "\1\35\1\36\1\7\1\37\1\7\1\3\2\5\2\40"+
    "\1\41\1\42\1\5\1\43\1\5\1\44\1\5\1\45"+
    "\71\0\3\3\43\0\1\3\23\0\1\46\66\0\1\47"+
    "\66\0\3\7\1\0\1\7\1\0\32\7\16\0\1\7"+
    "\11\0\1\10\1\50\1\51\61\0\3\7\1\0\1\7"+
    "\1\0\2\7\1\52\1\7\1\53\1\54\1\55\10\7"+
    "\1\56\12\7\16\0\1\7\14\0\1\5\60\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\54\3\7\1\57\1\60"+
    "\3\7\1\61\4\7\1\62\12\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\63\1\0\1\64\3\7\1\65\3\7"+
    "\1\66\1\7\1\67\2\7\1\70\1\71\13\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\72\1\0\1\73\3\7"+
    "\1\74\3\7\1\75\3\7\1\76\2\7\1\77\12\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\100\1\0\1\101"+
    "\7\7\1\102\1\7\1\103\3\7\1\104\13\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\1\105\7\7"+
    "\1\106\1\7\1\107\17\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\110\1\0\10\7\1\111\5\7\1\112\13\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\113\1\0\4\7"+
    "\1\114\1\7\1\115\3\7\1\116\3\7\1\117\13\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\4\7"+
    "\1\120\1\121\1\7\1\122\2\7\1\123\1\124\12\7"+
    "\1\125\3\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\1\126\3\7\1\127\1\7\1\130\1\7\1\131"+
    "\1\7\1\132\1\7\1\133\15\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\5\7\1\134\1\7\1\135"+
    "\7\7\1\136\12\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\137\1\0\4\7\1\140\3\7\1\141\1\7\1\142"+
    "\3\7\1\143\13\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\1\144\7\7\1\145\21\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\146\1\0\1\147\3\7\1\150"+
    "\5\7\1\151\5\7\1\121\11\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\152\3\7\1\153"+
    "\5\7\1\121\3\7\1\121\12\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\154\1\0\1\155\2\7\1\156\4\7"+
    "\1\157\1\160\2\7\1\161\3\7\1\162\11\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\4\7\1\163"+
    "\3\7\1\164\21\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\165\1\0\16\7\1\166\13\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\167\1\0\32\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\1\170\3\7\1\171\7\7"+
    "\1\172\1\7\1\173\13\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\1\174\15\7\1\175\13\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\10\7\1\176"+
    "\21\7\16\0\1\7\53\0\1\5\66\0\1\5\67\0"+
    "\1\5\67\0\1\5\67\0\1\5\66\0\1\5\2\0"+
    "\5\177\1\200\60\177\1\47\1\201\1\202\63\47\11\0"+
    "\1\50\1\0\1\51\60\0\1\203\2\0\1\204\2\0"+
    "\1\203\33\0\1\203\24\0\3\7\1\0\1\205\1\0"+
    "\3\7\1\206\5\7\1\207\4\7\1\210\13\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\4\7\1\211"+
    "\25\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\121\30\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\17\7\1\212\12\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\11\7\1\213\20\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\1\7\1\121"+
    "\16\7\1\121\11\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\3\7\1\125\2\7\1\121\23\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\3\7\1\214"+
    "\26\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\11\7\1\121\20\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\1\215\4\7\1\165\1\216\2\7\1\217"+
    "\1\7\1\220\3\7\1\221\12\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\3\7\1\222\26\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\10\7\1\223"+
    "\21\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\12\7\1\224\17\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\24\7\1\223\5\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\11\7\1\221\20\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\17\7\1\225"+
    "\12\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\2\7\1\226\27\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\15\7\1\227\14\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\1\230\11\7\1\231\3\7"+
    "\1\232\1\7\1\233\11\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\121\22\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\234\1\0\32\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\235\1\0\32\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\1\236\2\7\1\237"+
    "\3\7\1\240\1\7\1\241\1\7\1\242\3\7\1\243"+
    "\6\7\1\244\3\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\16\7\1\245\13\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\6\7\1\246\16\7\1\247"+
    "\4\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\6\7\1\212\23\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\21\7\1\250\10\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\3\7\1\251\26\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\3\7\1\121"+
    "\1\7\1\252\3\7\1\253\20\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\6\7\1\254\23\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\13\7\1\255"+
    "\16\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\1\54\31\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\5\7\1\256\15\7\1\212\6\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\4\7\1\257\25\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\260\1\0\10\7"+
    "\1\261\5\7\1\262\13\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\1\234\31\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\15\7\1\263\14\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\26\7\1\264"+
    "\3\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\125\30\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\265\1\0\3\7\1\266\26\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\3\7\1\125\26\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\13\7\1\267"+
    "\16\7\16\0\1\7\7\0\3\7\1\0\1\270\1\0"+
    "\32\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\17\7\1\271\12\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\272\1\0\10\7\1\273\21\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\10\7\1\55\1\7\1\274"+
    "\17\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\1\275\4\7\1\276\1\277\15\7\1\300\5\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\4\7\1\301"+
    "\25\7\16\0\1\7\7\0\3\7\1\0\1\302\1\0"+
    "\32\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\7\7\1\303\6\7\1\304\13\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\305\30\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\306\1\0\32\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\3\7\1\307"+
    "\26\7\16\0\1\7\7\0\3\7\1\0\1\310\1\0"+
    "\10\7\1\311\21\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\4\7\1\312\25\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\5\7\1\313\1\314\23\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\6\7"+
    "\1\315\23\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\26\7\1\316\3\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\6\7\1\317\23\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\3\7\1\320\15\7"+
    "\1\176\10\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\11\7\1\321\20\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\322\1\0\10\7\1\323\21\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\6\7\1\324\23\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\325\1\0\32\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\326\1\7\1\327\1\7\1\125\11\7\1\330\12\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\3\7"+
    "\1\331\2\7\1\332\2\7\1\333\5\7\1\334\4\7"+
    "\1\335\5\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\26\7\1\212\3\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\1\336\31\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\24\7\1\212\5\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\14\7\1\337"+
    "\15\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\12\7\1\340\17\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\17\7\1\341\12\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\1\342\7\7\1\343\21\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\3\7"+
    "\1\344\26\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\20\7\1\121\11\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\6\7\1\314\23\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\4\7\1\345\25\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\16\7"+
    "\1\346\13\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\16\7\1\347\13\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\350\1\0\16\7\1\103\13\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\3\7\1\351\26\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\4\7"+
    "\1\352\1\7\1\353\23\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\354\1\0\32\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\16\7\1\234\13\7\16\0\1\7"+
    "\5\177\1\355\64\177\1\356\1\355\60\177\2\0\1\202"+
    "\74\0\1\204\63\0\3\7\1\0\1\7\1\0\11\7"+
    "\1\357\20\7\16\0\1\7\7\0\3\7\1\0\1\360"+
    "\1\0\32\7\16\0\1\7\7\0\3\7\1\0\1\361"+
    "\1\0\32\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\3\7\1\121\13\7\1\362\12\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\6\7\1\363\23\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\121\1\0\32\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\1\364"+
    "\31\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\14\7\1\365\15\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\6\7\1\366\23\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\367\1\0\32\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\6\7\1\370\23\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\1\371\31\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\1\372"+
    "\31\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\15\7\1\103\14\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\3\7\1\373\17\7\1\121\6\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\3\7\1\374"+
    "\26\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\6\7\1\375\23\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\5\7\1\376\24\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\5\7\1\377\24\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\21\7\1\u0100"+
    "\10\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\27\7\1\u0101\2\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\5\7\1\121\24\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\31\7\1\u0102\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\1\7\1\u0103\30\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\12\7"+
    "\1\u0104\17\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\6\7\1\u0105\23\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\10\7\1\u0106\21\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\u0107\1\0\32\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\3\7\1\u0108\26\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\u0109\1\0\10\7"+
    "\1\u010a\21\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\17\7\1\u010b\12\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\6\7\1\u010c\23\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\11\7\1\u010d\7\7"+
    "\1\u010e\10\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\14\7\1\255\15\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\16\7\1\u010f\13\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\11\7\1\u0110\20\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\14\7"+
    "\1\u0111\15\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\6\7\1\u0112\23\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\3\7\1\121\26\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\u0113\1\0\32\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\11\7\1\u0114\20\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\11\7"+
    "\1\u0115\20\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\11\7\1\u0116\20\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\5\7\1\255\16\7\1\u0117\5\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\6\7"+
    "\1\u0118\23\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\10\7\1\255\21\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\5\7\1\u0119\24\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\16\7\1\u011a\13\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\17\7"+
    "\1\u011b\12\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\4\7\1\121\25\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\121\1\0\11\7\1\u011c\20\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\1\367\31\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\17\7\1\u011d"+
    "\12\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\17\7\1\u011e\12\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\6\7\1\u011f\23\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\3\7\1\u0120\13\7\1\u0121"+
    "\6\7\1\330\3\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\6\7\1\272\3\7\1\u0122\17\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\7\7\1\u0123"+
    "\14\7\1\u0124\5\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\4\7\1\u0125\12\7\1\u0126\12\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\11\7\1\u0127"+
    "\20\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\16\7\1\117\13\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\10\7\1\234\20\7\1\u0128\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\1\u0129\31\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\11\7\1\u012a"+
    "\20\7\16\0\1\7\7\0\3\7\1\0\1\u012b\1\0"+
    "\32\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\24\7\1\121\5\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\u012c\1\0\32\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\11\7\1\u012d\20\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\6\7\1\121\23\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\121\1\0\6\7\1\u012e"+
    "\23\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\16\7\1\u012f\13\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\u0130\30\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\25\7\1\u0131\4\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\23\7\1\343"+
    "\6\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\1\324\31\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\25\7\1\55\4\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\23\7\1\121\6\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\5\7\1\u0132\24\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\u0133\1\0\32\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\u0134\1\0\10\7"+
    "\1\121\21\7\16\0\1\7\7\0\3\7\1\0\1\u0109"+
    "\1\0\32\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\12\7\1\u0135\17\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\u0136\1\0\32\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\12\7\1\u0137\17\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\17\7\1\u0138\12\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\1\u0139"+
    "\31\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\3\7\1\u013a\26\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\u013b\1\0\32\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\3\7\1\u013c\26\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\3\7\1\u013d\26\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\5\7\1\255"+
    "\24\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\12\7\1\223\17\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\10\7\1\121\21\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\21\7\1\212\10\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\3\7\1\u013e"+
    "\26\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\3\7\1\u013f\26\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\4\7\1\212\1\121\24\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\14\7\1\u0140\15\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\20\7"+
    "\1\316\11\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\12\7\1\u0141\17\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\25\7\1\121\4\7\16\0\1\7"+
    "\4\177\1\202\1\355\60\177\7\0\3\7\1\0\1\7"+
    "\1\0\12\7\1\367\17\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\4\7\1\u0142\25\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\7\7\1\255\22\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\3\7"+
    "\1\u011d\26\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\26\7\1\314\3\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\212\22\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\10\7\1\u0143\21\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\6\7"+
    "\1\u0144\23\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\3\7\1\212\26\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\1\u0145\31\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\12\7\1\u0146\17\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\15\7\1\u0147"+
    "\14\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\4\7\1\u0148\11\7\1\u0149\13\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\17\7\1\u014a\12\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\u014b\1\0\32\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\17\7\1\u014c"+
    "\12\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\11\7\1\272\20\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\21\7\1\125\10\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\11\7\1\u014d\20\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\12\7\1\u014e"+
    "\17\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\3\7\1\u014f\26\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\4\7\1\234\25\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\16\7\1\u0150\13\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\5\7\1\u0151"+
    "\24\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\4\7\1\u0152\25\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\4\7\1\u0153\3\7\1\u0145\21\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\4\7\1\255"+
    "\25\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\23\7\1\212\6\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\u0154\1\0\32\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\15\7\1\u0155\14\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\10\7\1\u0156\21\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\12\7\1\u0157"+
    "\17\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\10\7\1\u0142\21\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\6\7\1\u0158\23\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\u0159\1\0\32\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\16\7\1\u015a\13\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\5\7\1\344"+
    "\24\7\16\0\1\7\7\0\3\7\1\0\1\342\1\0"+
    "\32\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\16\7\1\u015b\13\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\u015c\1\0\32\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\1\u015d\31\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\16\7\1\221\13\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\1\7\1\u015e\1\u015f"+
    "\1\7\1\u0160\24\7\1\u0161\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\10\7\1\234\21\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\362\1\0\32\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\1\u0162\31\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\17\7\1\121"+
    "\12\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\3\7\1\u0163\26\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\u0164\1\0\32\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\1\u0165\15\7\1\u0166\13\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\3\7\1\u0167\26\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\24\7"+
    "\1\234\5\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\16\7\1\255\13\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\u0168\1\0\32\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\10\7\1\270\21\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\23\7\1\u0169\6\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\12\7"+
    "\1\212\17\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\3\7\1\u016a\26\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\14\7\1\121\15\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\3\7\1\u016b\26\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\16\7"+
    "\1\u016c\13\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\3\7\1\266\26\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\13\7\1\u016d\16\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\5\7\1\u016e\24\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\6\7"+
    "\1\u016f\23\7\16\0\1\7\7\0\3\7\1\0\1\76"+
    "\1\0\32\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\3\7\1\u0170\26\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\2\7\1\121\27\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\4\7\1\u0171\25\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\17\7"+
    "\1\125\12\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\11\7\1\255\20\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\4\7\1\u0172\25\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\16\7\1\u0173\13\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\5\7"+
    "\1\u0174\24\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\16\7\1\u0175\13\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\24\7\1\u0176\5\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\1\7\1\u0177\30\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\u0178\1\0\32\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\13\7"+
    "\1\u0126\16\7\16\0\1\7\7\0\3\7\1\0\1\u0179"+
    "\1\0\32\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\16\7\1\u017a\13\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\u011d\1\0\32\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\5\7\1\u014e\24\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\4\7\1\u017b\25\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\10\7"+
    "\1\377\21\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\4\7\1\212\25\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\6\7\1\255\23\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\1\55\31\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\16\7\1\u017c"+
    "\13\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\5\7\1\u0136\24\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\16\7\1\u017d\13\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\17\7\1\u017e\12\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\1\313\31\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\10\7"+
    "\1\u017f\21\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\1\314\31\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\u0180\1\0\32\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\11\7\1\u0181\20\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\13\7\1\u0182\16\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\u0183\1\0\32\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\16\7\1\u0136"+
    "\13\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\4\7\1\u0184\25\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\1\u0159\31\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\12\7\1\342\17\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\16\7\1\u0185\13\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\12\7"+
    "\1\274\17\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\11\7\1\324\20\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\13\7\1\121\16\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\17\7\1\266\12\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\u0186\30\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\4\7\1\165\25\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\1\u0187\31\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\24\7\1\314\5\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\10\7\1\u0188"+
    "\21\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\12\7\1\u0189\17\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\212\30\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\u018a\1\0\32\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\17\7\1\u018b\12\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\16\7\1\u018c"+
    "\13\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\5\7\1\u0128\24\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\4\7\1\u018d\25\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\5\7\1\u018e\24\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\7\7\1\u018f"+
    "\22\7\16\0\1\7\7\0\3\7\1\0\1\u0103\1\0"+
    "\32\7\16\0\1\7\7\0\3\7\1\0\1\u0190\1\0"+
    "\32\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\21\7\1\234\10\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\1\u0191\31\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\21\7\1\121\10\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\10\7\1\u0159\21\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\16\7"+
    "\1\u0192\13\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\17\7\1\332\12\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\16\7\1\u0193\13\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\10\7\1\u0194\21\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\3\7"+
    "\1\u0195\26\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\17\7\1\u0196\12\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\1\121\31\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\10\7\1\u0197\21\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\24\7\1\u0198"+
    "\5\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\5\7\1\u0199\24\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\16\7\1\u019a\13\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\15\7\1\u019b\14\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\22\7\1\212"+
    "\7\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\1\u019c\31\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\5\7\1\u019d\24\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\2\7\1\255\27\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\1\u012d\31\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\16\7\1\u019e"+
    "\13\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\5\7\1\u019f\24\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\4\7\1\u0126\25\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\u01a0\30\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\12\7\1\u0145"+
    "\17\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\3\7\1\u01a1\26\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\25\7\1\u01a2\4\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\u015d\1\0\32\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\4\7\1\u01a3\25\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\11\7\1\212"+
    "\20\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\5\7\1\u01a4\24\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\1\u01a5\31\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\3\7\1\u01a6\26\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\10\7\1\u01a5\21\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\2\7"+
    "\1\u01a7\27\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\11\7\1\u01a8\20\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\3\7\1\u01a9\26\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\3\7\1\u01aa\26\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\5\7"+
    "\1\u0198\24\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\16\7\1\u01ab\13\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\3\7\1\u01ac\26\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\25\7\1\234\4\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\27\7"+
    "\1\u01ad\2\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\32\7\1\u01ae\15\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\22\7\1\u0181\7\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\12\7\1\u01af\17\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\24\7\1\u01b0"+
    "\5\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\26\7\1\330\3\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\21\7\1\u0186\10\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\11\7\1\u0141\20\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\11\7\1\u01b1"+
    "\20\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\1\u01b2\31\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\17\7\1\u01b3\12\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\54\1\0\32\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\17\7\1\u01b4\12\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\16\7\1\342\13\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\27\7"+
    "\1\u01b5\2\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\3\7\1\u01b4\26\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\3\7\1\u0126\26\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\20\7\1\u01b6\11\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\20\7"+
    "\1\u01b7\11\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\11\7\1\u01b8\20\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\16\7\1\u01b9\13\7\16\0\1\7"+
    "\36\0\1\u01ba\36\0\3\7\1\0\1\7\1\0\3\7"+
    "\1\u01a3\26\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\7\7\1\103\22\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\10\7\1\314\21\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\17\7\1\u01bb\12\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\255\1\0\32\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\3\7"+
    "\1\u01bc\26\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\272\1\7\1\u01bd\6\7\1\u0135\17\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\11\7"+
    "\1\u01b1\15\7\1\u01be\2\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\1\u01bf\31\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\17\7\1\u01c0\3\7\1\u01c1"+
    "\6\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\11\7\1\u011d\20\7\16\0\1\7\21\0\1\u01c2\53\0"+
    "\3\7\1\0\1\7\1\0\10\7\1\u01c3\21\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\1\224\31\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\16\7"+
    "\1\u01c4\13\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\16\7\1\u01c5\13\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\12\7\1\u01c6\17\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\16\7\1\u01c7\13\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\u01c8\1\0\32\7"+
    "\16\0\1\7\25\0\1\u01c9\47\0\3\7\1\0\1\7"+
    "\1\0\12\7\1\u01ca\17\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\24\7\1\u01cb\5\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\5\7\1\u01cc\24\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\u0124\30\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\24\7\1\u01cd\5\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\20\7\1\u01ce\11\7\16\0\1\7"+
    "\27\0\1\u01cf\45\0\3\7\1\0\1\7\1\0\4\7"+
    "\1\u018b\25\7\16\0\1\7\7\0\3\7\1\0\1\u01d0"+
    "\1\0\32\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\17\7\1\330\12\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\16\7\1\u01d1\13\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\7\7\1\u01d2\22\7"+
    "\16\0\1\7\24\0\1\u01d3\50\0\3\7\1\0\1\7"+
    "\1\0\17\7\1\u01d4\12\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\6\7\1\u01d5\23\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\14\7\1\u01d6\15\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\3\7"+
    "\1\u01d7\26\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\1\u01d8\31\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\4\7\1\u01d9\25\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\1\67\31\7\16\0\1\7"+
    "\7\0\3\7\1\0\1\7\1\0\4\7\1\u01da\25\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\1\u01db"+
    "\31\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\16\7\1\u01dc\13\7\16\0\1\7\7\0\3\7\1\0"+
    "\1\7\1\0\17\7\1\u01dd\12\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\3\7\1\u01de\26\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\u01df\1\0\32\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\20\7\1\u01e0"+
    "\11\7\16\0\1\7\7\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\u01e1\1\7\1\u01bc\26\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\u01e2\1\0\32\7\16\0\1\7\7\0"+
    "\3\7\1\0\1\7\1\0\3\7\1\u01e3\26\7\16\0"+
    "\1\7\7\0\3\7\1\0\1\7\1\0\1\u01e4\31\7"+
    "\16\0\1\7\7\0\3\7\1\0\1\7\1\0\16\7"+
    "\1\u01e5\13\7\16\0\1\7\7\0\3\7\1\0\1\7"+
    "\1\0\6\7\1\u01e6\23\7\16\0\1\7\7\0\3\7"+
    "\1\0\1\7\1\0\17\7\1\u01df\12\7\16\0\1\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25542];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\40\1\1\0\2\1\1\0"+
    "\125\1\2\0\1\1\1\11\1\0\151\1\1\0\300\1"+
    "\1\0\13\1\1\0\7\1\1\0\6\1\1\0\5\1"+
    "\1\0\3\1\1\11\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[486];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2922) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 8: break;
          case 2: 
            { /* skip */
            } 
            // fall through
          case 9: break;
          case 3: 
            { lexeme=yytext(); return Operador;
            } 
            // fall through
          case 10: break;
          case 4: 
            { lexeme=yytext(); return Identificador;
            } 
            // fall through
          case 11: break;
          case 5: 
            { lexeme=yytext(); return Constante;
            } 
            // fall through
          case 12: break;
          case 6: 
            { lexeme=yytext(); return Comentario;
            } 
            // fall through
          case 13: break;
          case 7: 
            { lexeme=yytext(); return Reservada;
            } 
            // fall through
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
